{"ast":null,"code":"var _jsxFileName = \"D:\\\\carcor\\\\\\uC778\\uD130\\uB137 \\uC1FC\\uD551\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authAPI } from '../services/api';\n\n// 초기 상태\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  user: null,\n  token: null,\n  isAuthenticated: false,\n  loading: true,\n  error: null,\n  likedScripts: [] // 좋아요한 대본 목록\n};\n\n// 액션 타입\nconst AUTH_ACTIONS = {\n  LOGIN_START: 'LOGIN_START',\n  LOGIN_SUCCESS: 'LOGIN_SUCCESS',\n  LOGIN_FAIL: 'LOGIN_FAIL',\n  LOGOUT: 'LOGOUT',\n  LOAD_USER: 'LOAD_USER',\n  SET_LOADING: 'SET_LOADING',\n  CLEAR_ERROR: 'CLEAR_ERROR',\n  UPDATE_USER: 'UPDATE_USER',\n  ADD_LIKED_SCRIPT: 'ADD_LIKED_SCRIPT',\n  REMOVE_LIKED_SCRIPT: 'REMOVE_LIKED_SCRIPT',\n  SET_LIKED_SCRIPTS: 'SET_LIKED_SCRIPTS'\n};\n\n// 리듀서 함수\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case AUTH_ACTIONS.SET_LOADING:\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case AUTH_ACTIONS.LOGIN_START:\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case AUTH_ACTIONS.LOGIN_SUCCESS:\n      // 토큰을 localStorage에 저장\n      if (action.payload.token) {\n        localStorage.setItem('token', action.payload.token);\n      }\n      return {\n        ...state,\n        user: action.payload.user,\n        token: action.payload.token,\n        isAuthenticated: true,\n        loading: false,\n        error: null\n      };\n    case AUTH_ACTIONS.LOGIN_FAIL:\n      localStorage.removeItem('token');\n      return {\n        ...state,\n        user: null,\n        token: null,\n        isAuthenticated: false,\n        loading: false,\n        error: action.payload\n      };\n    case AUTH_ACTIONS.LOGOUT:\n      localStorage.removeItem('token');\n      return {\n        ...state,\n        user: null,\n        token: null,\n        isAuthenticated: false,\n        loading: false,\n        error: null\n      };\n    case AUTH_ACTIONS.LOAD_USER:\n      return {\n        ...state,\n        user: action.payload,\n        isAuthenticated: true,\n        loading: false\n      };\n    case AUTH_ACTIONS.UPDATE_USER:\n      return {\n        ...state,\n        user: action.payload\n      };\n    case AUTH_ACTIONS.CLEAR_ERROR:\n      return {\n        ...state,\n        error: null\n      };\n    case AUTH_ACTIONS.ADD_LIKED_SCRIPT:\n      return {\n        ...state,\n        likedScripts: [...state.likedScripts, action.payload]\n      };\n    case AUTH_ACTIONS.REMOVE_LIKED_SCRIPT:\n      return {\n        ...state,\n        likedScripts: state.likedScripts.filter(script => script._id !== action.payload)\n      };\n    case AUTH_ACTIONS.SET_LIKED_SCRIPTS:\n      return {\n        ...state,\n        likedScripts: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\n// Context 생성\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Context Provider 컴포넌트\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // 앱 시작 시 토큰 확인 및 사용자 정보 로드\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      loadUser();\n    } else {\n      dispatch({\n        type: AUTH_ACTIONS.SET_LOADING,\n        payload: false\n      });\n    }\n  }, []);\n\n  // 사용자 정보 로드\n  const loadUser = async () => {\n    try {\n      dispatch({\n        type: AUTH_ACTIONS.SET_LOADING,\n        payload: true\n      });\n      const token = localStorage.getItem('token');\n      if (!token) {\n        dispatch({\n          type: AUTH_ACTIONS.SET_LOADING,\n          payload: false\n        });\n        return;\n      }\n      const response = await authAPI.getMe();\n      dispatch({\n        type: AUTH_ACTIONS.LOAD_USER,\n        payload: response.data.user\n      });\n    } catch (error) {\n      console.error('사용자 정보 로드 실패:', error);\n      localStorage.removeItem('token');\n      dispatch({\n        type: AUTH_ACTIONS.SET_LOADING,\n        payload: false\n      });\n    }\n  };\n\n  // 회원가입\n  const register = async userData => {\n    try {\n      dispatch({\n        type: AUTH_ACTIONS.LOGIN_START\n      });\n      const response = await authAPI.register(userData);\n      dispatch({\n        type: AUTH_ACTIONS.LOGIN_SUCCESS,\n        payload: {\n          user: response.data.user,\n          token: response.data.token\n        }\n      });\n      return {\n        success: true,\n        message: response.data.message\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || '회원가입 중 오류가 발생했습니다.';\n      dispatch({\n        type: AUTH_ACTIONS.LOGIN_FAIL,\n        payload: errorMessage\n      });\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  };\n\n  // 로그인\n  const login = async loginData => {\n    try {\n      dispatch({\n        type: AUTH_ACTIONS.LOGIN_START\n      });\n      const response = await authAPI.login(loginData);\n      dispatch({\n        type: AUTH_ACTIONS.LOGIN_SUCCESS,\n        payload: {\n          user: response.data.user,\n          token: response.data.token\n        }\n      });\n      return {\n        success: true,\n        message: response.data.message\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || '로그인 중 오류가 발생했습니다.';\n      dispatch({\n        type: AUTH_ACTIONS.LOGIN_FAIL,\n        payload: errorMessage\n      });\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  };\n\n  // 로그아웃\n  const logout = async () => {\n    try {\n      await authAPI.logout();\n    } catch (error) {\n      console.error('로그아웃 API 호출 실패:', error);\n    } finally {\n      dispatch({\n        type: AUTH_ACTIONS.LOGOUT\n      });\n    }\n  };\n\n  // 프로필 업데이트\n  const updateProfile = async profileData => {\n    try {\n      const response = await authAPI.updateProfile(profileData);\n      dispatch({\n        type: AUTH_ACTIONS.UPDATE_USER,\n        payload: response.data.user\n      });\n      return {\n        success: true,\n        message: response.data.message\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      const errorMessage = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || '프로필 수정 중 오류가 발생했습니다.';\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  };\n\n  // 비밀번호 변경\n  const changePassword = async passwordData => {\n    try {\n      const response = await authAPI.changePassword(passwordData);\n      return {\n        success: true,\n        message: response.data.message\n      };\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      const errorMessage = ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || '비밀번호 변경 중 오류가 발생했습니다.';\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  };\n\n  // 에러 클리어\n  const clearError = () => {\n    dispatch({\n      type: AUTH_ACTIONS.CLEAR_ERROR\n    });\n  };\n\n  // 대본 좋아요 추가\n  const addLikedScript = script => {\n    // 로컬 스토리지에 저장 (추후 API 연동 예정)\n    const currentLiked = JSON.parse(localStorage.getItem('likedScripts') || '[]');\n    const newLiked = [...currentLiked, {\n      ...script,\n      likedAt: new Date().toISOString()\n    }];\n    localStorage.setItem('likedScripts', JSON.stringify(newLiked));\n    dispatch({\n      type: AUTH_ACTIONS.ADD_LIKED_SCRIPT,\n      payload: {\n        ...script,\n        likedAt: new Date().toISOString()\n      }\n    });\n  };\n\n  // 대본 좋아요 제거\n  const removeLikedScript = scriptId => {\n    // 로컬 스토리지에서 제거 (추후 API 연동 예정)\n    const currentLiked = JSON.parse(localStorage.getItem('likedScripts') || '[]');\n    const newLiked = currentLiked.filter(script => script._id !== scriptId);\n    localStorage.setItem('likedScripts', JSON.stringify(newLiked));\n    dispatch({\n      type: AUTH_ACTIONS.REMOVE_LIKED_SCRIPT,\n      payload: scriptId\n    });\n  };\n\n  // 좋아요한 대본 목록 로드\n  const loadLikedScripts = () => {\n    // 로컬 스토리지에서 로드 (추후 API 연동 예정)\n    const likedScripts = JSON.parse(localStorage.getItem('likedScripts') || '[]');\n    dispatch({\n      type: AUTH_ACTIONS.SET_LIKED_SCRIPTS,\n      payload: likedScripts\n    });\n  };\n\n  // 대본이 좋아요 되었는지 확인\n  const isScriptLiked = scriptId => {\n    return state.likedScripts.some(script => script._id === scriptId);\n  };\n  const value = {\n    ...state,\n    register,\n    login,\n    logout,\n    loadUser,\n    updateProfile,\n    changePassword,\n    clearError,\n    addLikedScript,\n    removeLikedScript,\n    loadLikedScripts,\n    isScriptLiked\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 317,\n    columnNumber: 5\n  }, this);\n};\n\n// Context 사용을 위한 커스텀 훅\n_s(AuthProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","authAPI","jsxDEV","_jsxDEV","initialState","user","token","isAuthenticated","loading","error","likedScripts","AUTH_ACTIONS","LOGIN_START","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","LOAD_USER","SET_LOADING","CLEAR_ERROR","UPDATE_USER","ADD_LIKED_SCRIPT","REMOVE_LIKED_SCRIPT","SET_LIKED_SCRIPTS","authReducer","state","action","type","payload","localStorage","setItem","removeItem","filter","script","_id","AuthContext","AuthProvider","children","_s","dispatch","getItem","loadUser","response","getMe","data","console","register","userData","success","message","_error$response","_error$response$data","errorMessage","login","loginData","_error$response2","_error$response2$data","logout","updateProfile","profileData","_error$response3","_error$response3$data","changePassword","passwordData","_error$response4","_error$response4$data","clearError","addLikedScript","currentLiked","JSON","parse","newLiked","likedAt","Date","toISOString","stringify","removeLikedScript","scriptId","loadLikedScripts","isScriptLiked","some","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["D:/carcor/인터넷 쇼핑/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport { authAPI } from '../services/api';\r\n\r\n// 초기 상태\r\nconst initialState = {\r\n  user: null,\r\n  token: null,\r\n  isAuthenticated: false,\r\n  loading: true,\r\n  error: null,\r\n  likedScripts: [] // 좋아요한 대본 목록\r\n};\r\n\r\n// 액션 타입\r\nconst AUTH_ACTIONS = {\r\n  LOGIN_START: 'LOGIN_START',\r\n  LOGIN_SUCCESS: 'LOGIN_SUCCESS',\r\n  LOGIN_FAIL: 'LOGIN_FAIL',\r\n  LOGOUT: 'LOGOUT',\r\n  LOAD_USER: 'LOAD_USER',\r\n  SET_LOADING: 'SET_LOADING',\r\n  CLEAR_ERROR: 'CLEAR_ERROR',\r\n  UPDATE_USER: 'UPDATE_USER',\r\n  ADD_LIKED_SCRIPT: 'ADD_LIKED_SCRIPT',\r\n  REMOVE_LIKED_SCRIPT: 'REMOVE_LIKED_SCRIPT',\r\n  SET_LIKED_SCRIPTS: 'SET_LIKED_SCRIPTS'\r\n};\r\n\r\n// 리듀서 함수\r\nconst authReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case AUTH_ACTIONS.SET_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: action.payload\r\n      };\r\n\r\n    case AUTH_ACTIONS.LOGIN_START:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n      };\r\n\r\n    case AUTH_ACTIONS.LOGIN_SUCCESS:\r\n      // 토큰을 localStorage에 저장\r\n      if (action.payload.token) {\r\n        localStorage.setItem('token', action.payload.token);\r\n      }\r\n      return {\r\n        ...state,\r\n        user: action.payload.user,\r\n        token: action.payload.token,\r\n        isAuthenticated: true,\r\n        loading: false,\r\n        error: null\r\n      };\r\n\r\n    case AUTH_ACTIONS.LOGIN_FAIL:\r\n      localStorage.removeItem('token');\r\n      return {\r\n        ...state,\r\n        user: null,\r\n        token: null,\r\n        isAuthenticated: false,\r\n        loading: false,\r\n        error: action.payload\r\n      };\r\n\r\n    case AUTH_ACTIONS.LOGOUT:\r\n      localStorage.removeItem('token');\r\n      return {\r\n        ...state,\r\n        user: null,\r\n        token: null,\r\n        isAuthenticated: false,\r\n        loading: false,\r\n        error: null\r\n      };\r\n\r\n    case AUTH_ACTIONS.LOAD_USER:\r\n      return {\r\n        ...state,\r\n        user: action.payload,\r\n        isAuthenticated: true,\r\n        loading: false\r\n      };\r\n\r\n    case AUTH_ACTIONS.UPDATE_USER:\r\n      return {\r\n        ...state,\r\n        user: action.payload\r\n      };\r\n\r\n    case AUTH_ACTIONS.CLEAR_ERROR:\r\n      return {\r\n        ...state,\r\n        error: null\r\n      };\r\n\r\n    case AUTH_ACTIONS.ADD_LIKED_SCRIPT:\r\n      return {\r\n        ...state,\r\n        likedScripts: [...state.likedScripts, action.payload]\r\n      };\r\n\r\n    case AUTH_ACTIONS.REMOVE_LIKED_SCRIPT:\r\n      return {\r\n        ...state,\r\n        likedScripts: state.likedScripts.filter(script => script._id !== action.payload)\r\n      };\r\n\r\n    case AUTH_ACTIONS.SET_LIKED_SCRIPTS:\r\n      return {\r\n        ...state,\r\n        likedScripts: action.payload\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Context 생성\r\nconst AuthContext = createContext();\r\n\r\n// Context Provider 컴포넌트\r\nexport const AuthProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  // 앱 시작 시 토큰 확인 및 사용자 정보 로드\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      loadUser();\r\n    } else {\r\n      dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: false });\r\n    }\r\n  }, []);\r\n\r\n  // 사용자 정보 로드\r\n  const loadUser = async () => {\r\n    try {\r\n      dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: true });\r\n      \r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: false });\r\n        return;\r\n      }\r\n\r\n      const response = await authAPI.getMe();\r\n      dispatch({\r\n        type: AUTH_ACTIONS.LOAD_USER,\r\n        payload: response.data.user\r\n      });\r\n    } catch (error) {\r\n      console.error('사용자 정보 로드 실패:', error);\r\n      localStorage.removeItem('token');\r\n      dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: false });\r\n    }\r\n  };\r\n\r\n  // 회원가입\r\n  const register = async (userData) => {\r\n    try {\r\n      dispatch({ type: AUTH_ACTIONS.LOGIN_START });\r\n      \r\n      const response = await authAPI.register(userData);\r\n      \r\n      dispatch({\r\n        type: AUTH_ACTIONS.LOGIN_SUCCESS,\r\n        payload: {\r\n          user: response.data.user,\r\n          token: response.data.token\r\n        }\r\n      });\r\n\r\n      return { success: true, message: response.data.message };\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || '회원가입 중 오류가 발생했습니다.';\r\n      dispatch({\r\n        type: AUTH_ACTIONS.LOGIN_FAIL,\r\n        payload: errorMessage\r\n      });\r\n      return { success: false, message: errorMessage };\r\n    }\r\n  };\r\n\r\n  // 로그인\r\n  const login = async (loginData) => {\r\n    try {\r\n      dispatch({ type: AUTH_ACTIONS.LOGIN_START });\r\n      \r\n      const response = await authAPI.login(loginData);\r\n      \r\n      dispatch({\r\n        type: AUTH_ACTIONS.LOGIN_SUCCESS,\r\n        payload: {\r\n          user: response.data.user,\r\n          token: response.data.token\r\n        }\r\n      });\r\n\r\n      return { success: true, message: response.data.message };\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || '로그인 중 오류가 발생했습니다.';\r\n      dispatch({\r\n        type: AUTH_ACTIONS.LOGIN_FAIL,\r\n        payload: errorMessage\r\n      });\r\n      return { success: false, message: errorMessage };\r\n    }\r\n  };\r\n\r\n  // 로그아웃\r\n  const logout = async () => {\r\n    try {\r\n      await authAPI.logout();\r\n    } catch (error) {\r\n      console.error('로그아웃 API 호출 실패:', error);\r\n    } finally {\r\n      dispatch({ type: AUTH_ACTIONS.LOGOUT });\r\n    }\r\n  };\r\n\r\n  // 프로필 업데이트\r\n  const updateProfile = async (profileData) => {\r\n    try {\r\n      const response = await authAPI.updateProfile(profileData);\r\n      \r\n      dispatch({\r\n        type: AUTH_ACTIONS.UPDATE_USER,\r\n        payload: response.data.user\r\n      });\r\n\r\n      return { success: true, message: response.data.message };\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || '프로필 수정 중 오류가 발생했습니다.';\r\n      return { success: false, message: errorMessage };\r\n    }\r\n  };\r\n\r\n  // 비밀번호 변경\r\n  const changePassword = async (passwordData) => {\r\n    try {\r\n      const response = await authAPI.changePassword(passwordData);\r\n      return { success: true, message: response.data.message };\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || '비밀번호 변경 중 오류가 발생했습니다.';\r\n      return { success: false, message: errorMessage };\r\n    }\r\n  };\r\n\r\n  // 에러 클리어\r\n  const clearError = () => {\r\n    dispatch({ type: AUTH_ACTIONS.CLEAR_ERROR });\r\n  };\r\n\r\n  // 대본 좋아요 추가\r\n  const addLikedScript = (script) => {\r\n    // 로컬 스토리지에 저장 (추후 API 연동 예정)\r\n    const currentLiked = JSON.parse(localStorage.getItem('likedScripts') || '[]');\r\n    const newLiked = [...currentLiked, { ...script, likedAt: new Date().toISOString() }];\r\n    localStorage.setItem('likedScripts', JSON.stringify(newLiked));\r\n    \r\n    dispatch({\r\n      type: AUTH_ACTIONS.ADD_LIKED_SCRIPT,\r\n      payload: { ...script, likedAt: new Date().toISOString() }\r\n    });\r\n  };\r\n\r\n  // 대본 좋아요 제거\r\n  const removeLikedScript = (scriptId) => {\r\n    // 로컬 스토리지에서 제거 (추후 API 연동 예정)\r\n    const currentLiked = JSON.parse(localStorage.getItem('likedScripts') || '[]');\r\n    const newLiked = currentLiked.filter(script => script._id !== scriptId);\r\n    localStorage.setItem('likedScripts', JSON.stringify(newLiked));\r\n    \r\n    dispatch({\r\n      type: AUTH_ACTIONS.REMOVE_LIKED_SCRIPT,\r\n      payload: scriptId\r\n    });\r\n  };\r\n\r\n  // 좋아요한 대본 목록 로드\r\n  const loadLikedScripts = () => {\r\n    // 로컬 스토리지에서 로드 (추후 API 연동 예정)\r\n    const likedScripts = JSON.parse(localStorage.getItem('likedScripts') || '[]');\r\n    dispatch({\r\n      type: AUTH_ACTIONS.SET_LIKED_SCRIPTS,\r\n      payload: likedScripts\r\n    });\r\n  };\r\n\r\n  // 대본이 좋아요 되었는지 확인\r\n  const isScriptLiked = (scriptId) => {\r\n    return state.likedScripts.some(script => script._id === scriptId);\r\n  };\r\n\r\n  const value = {\r\n    ...state,\r\n    register,\r\n    login,\r\n    logout,\r\n    loadUser,\r\n    updateProfile,\r\n    changePassword,\r\n    clearError,\r\n    addLikedScript,\r\n    removeLikedScript,\r\n    loadLikedScripts,\r\n    isScriptLiked\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Context 사용을 위한 커스텀 훅\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}