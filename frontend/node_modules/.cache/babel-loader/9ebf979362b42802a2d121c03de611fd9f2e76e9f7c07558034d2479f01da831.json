{"ast":null,"code":"import React,{createContext,useContext,useReducer,useEffect}from'react';import{authAPI}from'../services/api';// 초기 상태\nimport{jsx as _jsx}from\"react/jsx-runtime\";const initialState={user:null,token:null,isAuthenticated:false,loading:true,error:null};// 액션 타입\nconst AUTH_ACTIONS={LOGIN_START:'LOGIN_START',LOGIN_SUCCESS:'LOGIN_SUCCESS',LOGIN_FAIL:'LOGIN_FAIL',LOGOUT:'LOGOUT',LOAD_USER:'LOAD_USER',SET_LOADING:'SET_LOADING',CLEAR_ERROR:'CLEAR_ERROR',UPDATE_USER:'UPDATE_USER'};// 리듀서 함수\nconst authReducer=(state,action)=>{switch(action.type){case AUTH_ACTIONS.SET_LOADING:return{...state,loading:action.payload};case AUTH_ACTIONS.LOGIN_START:return{...state,loading:true,error:null};case AUTH_ACTIONS.LOGIN_SUCCESS:// 토큰을 localStorage에 저장\nif(action.payload.token){localStorage.setItem('token',action.payload.token);}return{...state,user:action.payload.user,token:action.payload.token,isAuthenticated:true,loading:false,error:null};case AUTH_ACTIONS.LOGIN_FAIL:localStorage.removeItem('token');return{...state,user:null,token:null,isAuthenticated:false,loading:false,error:action.payload};case AUTH_ACTIONS.LOGOUT:localStorage.removeItem('token');return{...state,user:null,token:null,isAuthenticated:false,loading:false,error:null};case AUTH_ACTIONS.LOAD_USER:return{...state,user:action.payload,isAuthenticated:true,loading:false};case AUTH_ACTIONS.UPDATE_USER:return{...state,user:action.payload};case AUTH_ACTIONS.CLEAR_ERROR:return{...state,error:null};default:return state;}};// Context 생성\nconst AuthContext=/*#__PURE__*/createContext();// Context Provider 컴포넌트\nexport const AuthProvider=_ref=>{let{children}=_ref;const[state,dispatch]=useReducer(authReducer,initialState);// 앱 시작 시 토큰 확인 및 사용자 정보 로드\nuseEffect(()=>{const token=localStorage.getItem('token');if(token){loadUser();}else{dispatch({type:AUTH_ACTIONS.SET_LOADING,payload:false});}},[]);// 사용자 정보 로드\nconst loadUser=async()=>{try{dispatch({type:AUTH_ACTIONS.SET_LOADING,payload:true});const token=localStorage.getItem('token');if(!token){dispatch({type:AUTH_ACTIONS.SET_LOADING,payload:false});return;}const response=await authAPI.getMe();dispatch({type:AUTH_ACTIONS.LOAD_USER,payload:response.data.user});}catch(error){console.error('사용자 정보 로드 실패:',error);localStorage.removeItem('token');dispatch({type:AUTH_ACTIONS.SET_LOADING,payload:false});}};// 회원가입\nconst register=async userData=>{try{dispatch({type:AUTH_ACTIONS.LOGIN_START});const response=await authAPI.register(userData);dispatch({type:AUTH_ACTIONS.LOGIN_SUCCESS,payload:{user:response.data.user,token:response.data.token}});return{success:true,message:response.data.message};}catch(error){var _error$response,_error$response$data;const errorMessage=((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'회원가입 중 오류가 발생했습니다.';dispatch({type:AUTH_ACTIONS.LOGIN_FAIL,payload:errorMessage});return{success:false,message:errorMessage};}};// 로그인\nconst login=async loginData=>{try{dispatch({type:AUTH_ACTIONS.LOGIN_START});const response=await authAPI.login(loginData);dispatch({type:AUTH_ACTIONS.LOGIN_SUCCESS,payload:{user:response.data.user,token:response.data.token}});return{success:true,message:response.data.message};}catch(error){var _error$response2,_error$response2$data;const errorMessage=((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'로그인 중 오류가 발생했습니다.';dispatch({type:AUTH_ACTIONS.LOGIN_FAIL,payload:errorMessage});return{success:false,message:errorMessage};}};// 로그아웃\nconst logout=async()=>{try{await authAPI.logout();}catch(error){console.error('로그아웃 API 호출 실패:',error);}finally{dispatch({type:AUTH_ACTIONS.LOGOUT});}};// 프로필 업데이트\nconst updateProfile=async profileData=>{try{const response=await authAPI.updateProfile(profileData);dispatch({type:AUTH_ACTIONS.UPDATE_USER,payload:response.data.user});return{success:true,message:response.data.message};}catch(error){var _error$response3,_error$response3$data;const errorMessage=((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.message)||'프로필 수정 중 오류가 발생했습니다.';return{success:false,message:errorMessage};}};// 비밀번호 변경\nconst changePassword=async passwordData=>{try{const response=await authAPI.changePassword(passwordData);return{success:true,message:response.data.message};}catch(error){var _error$response4,_error$response4$data;const errorMessage=((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.message)||'비밀번호 변경 중 오류가 발생했습니다.';return{success:false,message:errorMessage};}};// 에러 클리어\nconst clearError=()=>{dispatch({type:AUTH_ACTIONS.CLEAR_ERROR});};const value={...state,register,login,logout,loadUser,updateProfile,changePassword,clearError};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};// Context 사용을 위한 커스텀 훅\nexport const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};export default AuthContext;","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","authAPI","jsx","_jsx","initialState","user","token","isAuthenticated","loading","error","AUTH_ACTIONS","LOGIN_START","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","LOAD_USER","SET_LOADING","CLEAR_ERROR","UPDATE_USER","authReducer","state","action","type","payload","localStorage","setItem","removeItem","AuthContext","AuthProvider","_ref","children","dispatch","getItem","loadUser","response","getMe","data","console","register","userData","success","message","_error$response","_error$response$data","errorMessage","login","loginData","_error$response2","_error$response2$data","logout","updateProfile","profileData","_error$response3","_error$response3$data","changePassword","passwordData","_error$response4","_error$response4$data","clearError","value","Provider","useAuth","context","Error"],"sources":["D:/carcor/인터넷 쇼핑/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport { authAPI } from '../services/api';\r\n\r\n// 초기 상태\r\nconst initialState = {\r\n  user: null,\r\n  token: null,\r\n  isAuthenticated: false,\r\n  loading: true,\r\n  error: null\r\n};\r\n\r\n// 액션 타입\r\nconst AUTH_ACTIONS = {\r\n  LOGIN_START: 'LOGIN_START',\r\n  LOGIN_SUCCESS: 'LOGIN_SUCCESS',\r\n  LOGIN_FAIL: 'LOGIN_FAIL',\r\n  LOGOUT: 'LOGOUT',\r\n  LOAD_USER: 'LOAD_USER',\r\n  SET_LOADING: 'SET_LOADING',\r\n  CLEAR_ERROR: 'CLEAR_ERROR',\r\n  UPDATE_USER: 'UPDATE_USER'\r\n};\r\n\r\n// 리듀서 함수\r\nconst authReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case AUTH_ACTIONS.SET_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: action.payload\r\n      };\r\n\r\n    case AUTH_ACTIONS.LOGIN_START:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n      };\r\n\r\n    case AUTH_ACTIONS.LOGIN_SUCCESS:\r\n      // 토큰을 localStorage에 저장\r\n      if (action.payload.token) {\r\n        localStorage.setItem('token', action.payload.token);\r\n      }\r\n      return {\r\n        ...state,\r\n        user: action.payload.user,\r\n        token: action.payload.token,\r\n        isAuthenticated: true,\r\n        loading: false,\r\n        error: null\r\n      };\r\n\r\n    case AUTH_ACTIONS.LOGIN_FAIL:\r\n      localStorage.removeItem('token');\r\n      return {\r\n        ...state,\r\n        user: null,\r\n        token: null,\r\n        isAuthenticated: false,\r\n        loading: false,\r\n        error: action.payload\r\n      };\r\n\r\n    case AUTH_ACTIONS.LOGOUT:\r\n      localStorage.removeItem('token');\r\n      return {\r\n        ...state,\r\n        user: null,\r\n        token: null,\r\n        isAuthenticated: false,\r\n        loading: false,\r\n        error: null\r\n      };\r\n\r\n    case AUTH_ACTIONS.LOAD_USER:\r\n      return {\r\n        ...state,\r\n        user: action.payload,\r\n        isAuthenticated: true,\r\n        loading: false\r\n      };\r\n\r\n    case AUTH_ACTIONS.UPDATE_USER:\r\n      return {\r\n        ...state,\r\n        user: action.payload\r\n      };\r\n\r\n    case AUTH_ACTIONS.CLEAR_ERROR:\r\n      return {\r\n        ...state,\r\n        error: null\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Context 생성\r\nconst AuthContext = createContext();\r\n\r\n// Context Provider 컴포넌트\r\nexport const AuthProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  // 앱 시작 시 토큰 확인 및 사용자 정보 로드\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      loadUser();\r\n    } else {\r\n      dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: false });\r\n    }\r\n  }, []);\r\n\r\n  // 사용자 정보 로드\r\n  const loadUser = async () => {\r\n    try {\r\n      dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: true });\r\n      \r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: false });\r\n        return;\r\n      }\r\n\r\n      const response = await authAPI.getMe();\r\n      dispatch({\r\n        type: AUTH_ACTIONS.LOAD_USER,\r\n        payload: response.data.user\r\n      });\r\n    } catch (error) {\r\n      console.error('사용자 정보 로드 실패:', error);\r\n      localStorage.removeItem('token');\r\n      dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: false });\r\n    }\r\n  };\r\n\r\n  // 회원가입\r\n  const register = async (userData) => {\r\n    try {\r\n      dispatch({ type: AUTH_ACTIONS.LOGIN_START });\r\n      \r\n      const response = await authAPI.register(userData);\r\n      \r\n      dispatch({\r\n        type: AUTH_ACTIONS.LOGIN_SUCCESS,\r\n        payload: {\r\n          user: response.data.user,\r\n          token: response.data.token\r\n        }\r\n      });\r\n\r\n      return { success: true, message: response.data.message };\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || '회원가입 중 오류가 발생했습니다.';\r\n      dispatch({\r\n        type: AUTH_ACTIONS.LOGIN_FAIL,\r\n        payload: errorMessage\r\n      });\r\n      return { success: false, message: errorMessage };\r\n    }\r\n  };\r\n\r\n  // 로그인\r\n  const login = async (loginData) => {\r\n    try {\r\n      dispatch({ type: AUTH_ACTIONS.LOGIN_START });\r\n      \r\n      const response = await authAPI.login(loginData);\r\n      \r\n      dispatch({\r\n        type: AUTH_ACTIONS.LOGIN_SUCCESS,\r\n        payload: {\r\n          user: response.data.user,\r\n          token: response.data.token\r\n        }\r\n      });\r\n\r\n      return { success: true, message: response.data.message };\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || '로그인 중 오류가 발생했습니다.';\r\n      dispatch({\r\n        type: AUTH_ACTIONS.LOGIN_FAIL,\r\n        payload: errorMessage\r\n      });\r\n      return { success: false, message: errorMessage };\r\n    }\r\n  };\r\n\r\n  // 로그아웃\r\n  const logout = async () => {\r\n    try {\r\n      await authAPI.logout();\r\n    } catch (error) {\r\n      console.error('로그아웃 API 호출 실패:', error);\r\n    } finally {\r\n      dispatch({ type: AUTH_ACTIONS.LOGOUT });\r\n    }\r\n  };\r\n\r\n  // 프로필 업데이트\r\n  const updateProfile = async (profileData) => {\r\n    try {\r\n      const response = await authAPI.updateProfile(profileData);\r\n      \r\n      dispatch({\r\n        type: AUTH_ACTIONS.UPDATE_USER,\r\n        payload: response.data.user\r\n      });\r\n\r\n      return { success: true, message: response.data.message };\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || '프로필 수정 중 오류가 발생했습니다.';\r\n      return { success: false, message: errorMessage };\r\n    }\r\n  };\r\n\r\n  // 비밀번호 변경\r\n  const changePassword = async (passwordData) => {\r\n    try {\r\n      const response = await authAPI.changePassword(passwordData);\r\n      return { success: true, message: response.data.message };\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || '비밀번호 변경 중 오류가 발생했습니다.';\r\n      return { success: false, message: errorMessage };\r\n    }\r\n  };\r\n\r\n  // 에러 클리어\r\n  const clearError = () => {\r\n    dispatch({ type: AUTH_ACTIONS.CLEAR_ERROR });\r\n  };\r\n\r\n  const value = {\r\n    ...state,\r\n    register,\r\n    login,\r\n    logout,\r\n    loadUser,\r\n    updateProfile,\r\n    changePassword,\r\n    clearError\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Context 사용을 위한 커스텀 훅\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}