{"ast":null,"code":"var _jsxFileName = \"D:\\\\carcor\\\\\\uC778\\uD130\\uB137 \\uC1FC\\uD551\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect, useCallback } from 'react';\nimport { authAPI } from '../services/api';\n\n// 초기 상태\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  user: null,\n  token: null,\n  isAuthenticated: false,\n  loading: true,\n  error: null,\n  likedScripts: [],\n  // 좋아요한 대본 목록\n  savedScripts: [] // 저장한 대본 목록\n};\n\n// 액션 타입\nconst AUTH_ACTIONS = {\n  LOGIN_START: 'LOGIN_START',\n  LOGIN_SUCCESS: 'LOGIN_SUCCESS',\n  LOGIN_FAIL: 'LOGIN_FAIL',\n  LOGOUT: 'LOGOUT',\n  LOAD_USER: 'LOAD_USER',\n  SET_LOADING: 'SET_LOADING',\n  CLEAR_ERROR: 'CLEAR_ERROR',\n  UPDATE_USER: 'UPDATE_USER',\n  ADD_LIKED_SCRIPT: 'ADD_LIKED_SCRIPT',\n  REMOVE_LIKED_SCRIPT: 'REMOVE_LIKED_SCRIPT',\n  SET_LIKED_SCRIPTS: 'SET_LIKED_SCRIPTS',\n  ADD_SAVED_SCRIPT: 'ADD_SAVED_SCRIPT',\n  REMOVE_SAVED_SCRIPT: 'REMOVE_SAVED_SCRIPT',\n  SET_SAVED_SCRIPTS: 'SET_SAVED_SCRIPTS'\n};\n\n// 리듀서 함수\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case AUTH_ACTIONS.SET_LOADING:\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case AUTH_ACTIONS.LOGIN_START:\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case AUTH_ACTIONS.LOGIN_SUCCESS:\n      // 토큰을 localStorage에 저장\n      if (action.payload.token) {\n        localStorage.setItem('token', action.payload.token);\n      }\n      return {\n        ...state,\n        user: action.payload.user,\n        token: action.payload.token,\n        isAuthenticated: true,\n        loading: false,\n        error: null\n      };\n    case AUTH_ACTIONS.LOGIN_FAIL:\n      localStorage.removeItem('token');\n      return {\n        ...state,\n        user: null,\n        token: null,\n        isAuthenticated: false,\n        loading: false,\n        error: action.payload\n      };\n    case AUTH_ACTIONS.LOGOUT:\n      localStorage.removeItem('token');\n      return {\n        ...state,\n        user: null,\n        token: null,\n        isAuthenticated: false,\n        loading: false,\n        error: null\n      };\n    case AUTH_ACTIONS.LOAD_USER:\n      return {\n        ...state,\n        user: action.payload,\n        isAuthenticated: true,\n        loading: false\n      };\n    case AUTH_ACTIONS.UPDATE_USER:\n      return {\n        ...state,\n        user: action.payload\n      };\n    case AUTH_ACTIONS.CLEAR_ERROR:\n      return {\n        ...state,\n        error: null\n      };\n    case AUTH_ACTIONS.ADD_LIKED_SCRIPT:\n      return {\n        ...state,\n        likedScripts: [...state.likedScripts, action.payload]\n      };\n    case AUTH_ACTIONS.REMOVE_LIKED_SCRIPT:\n      return {\n        ...state,\n        likedScripts: state.likedScripts.filter(script => script._id !== action.payload)\n      };\n    case AUTH_ACTIONS.SET_LIKED_SCRIPTS:\n      return {\n        ...state,\n        likedScripts: action.payload\n      };\n    case AUTH_ACTIONS.ADD_SAVED_SCRIPT:\n      return {\n        ...state,\n        savedScripts: [...state.savedScripts, action.payload]\n      };\n    case AUTH_ACTIONS.REMOVE_SAVED_SCRIPT:\n      return {\n        ...state,\n        savedScripts: state.savedScripts.filter(script => script._id !== action.payload)\n      };\n    case AUTH_ACTIONS.SET_SAVED_SCRIPTS:\n      return {\n        ...state,\n        savedScripts: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\n// Context 생성\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Context Provider 컴포넌트\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // 앱 시작 시 토큰 확인 및 사용자 정보 로드\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      loadUser();\n    } else {\n      dispatch({\n        type: AUTH_ACTIONS.SET_LOADING,\n        payload: false\n      });\n    }\n  }, []);\n\n  // 사용자 정보 로드\n  const loadUser = async () => {\n    try {\n      dispatch({\n        type: AUTH_ACTIONS.SET_LOADING,\n        payload: true\n      });\n      const token = localStorage.getItem('token');\n      if (!token) {\n        dispatch({\n          type: AUTH_ACTIONS.SET_LOADING,\n          payload: false\n        });\n        return;\n      }\n\n      // 백엔드가 없으므로 더미 사용자 정보 로드\n      if (token.startsWith('dummy-jwt-token')) {\n        const dummyUser = {\n          _id: 'user123',\n          name: '김연기',\n          username: 'actor_kim',\n          email: 'test@example.com',\n          createdAt: '2024-01-01T00:00:00.000Z'\n        };\n        dispatch({\n          type: AUTH_ACTIONS.LOAD_USER,\n          payload: dummyUser\n        });\n      } else {\n        // 유효하지 않은 토큰\n        localStorage.removeItem('token');\n        dispatch({\n          type: AUTH_ACTIONS.SET_LOADING,\n          payload: false\n        });\n      }\n\n      // 실제 API 호출 (백엔드 연동 시 사용)\n      // const response = await authAPI.getMe();\n      // dispatch({\n      //   type: AUTH_ACTIONS.LOAD_USER,\n      //   payload: response.data.user\n      // });\n    } catch (error) {\n      console.error('사용자 정보 로드 실패:', error);\n      localStorage.removeItem('token');\n      dispatch({\n        type: AUTH_ACTIONS.SET_LOADING,\n        payload: false\n      });\n    }\n  };\n\n  // 회원가입\n  const register = async userData => {\n    try {\n      dispatch({\n        type: AUTH_ACTIONS.LOGIN_START\n      });\n\n      // 백엔드가 없으므로 더미 회원가입 로직 사용\n\n      // 기존 사용자 목록 가져오기\n      const existingUsers = JSON.parse(localStorage.getItem('registeredUsers') || '[]');\n\n      // 이메일 중복 체크\n      const existingUser = existingUsers.find(user => user.email === userData.email);\n      if (existingUser) {\n        dispatch({\n          type: AUTH_ACTIONS.LOGIN_FAIL,\n          payload: '이미 등록된 이메일입니다.'\n        });\n        return {\n          success: false,\n          message: '이미 등록된 이메일입니다.'\n        };\n      }\n      const dummyUser = {\n        _id: 'user_' + Date.now(),\n        name: userData.name,\n        username: userData.username || userData.name,\n        email: userData.email,\n        password: userData.password,\n        // 실제 환경에서는 암호화해야 함\n        createdAt: new Date().toISOString()\n      };\n\n      // 새 사용자를 localStorage에 저장\n      const updatedUsers = [...existingUsers, dummyUser];\n      localStorage.setItem('registeredUsers', JSON.stringify(updatedUsers));\n      const dummyToken = 'dummy-jwt-token-' + Date.now();\n\n      // 비밀번호 제외하고 사용자 정보 반환\n      const userWithoutPassword = {\n        _id: dummyUser._id,\n        name: dummyUser.name,\n        username: dummyUser.username,\n        email: dummyUser.email,\n        createdAt: dummyUser.createdAt\n      };\n      dispatch({\n        type: AUTH_ACTIONS.LOGIN_SUCCESS,\n        payload: {\n          user: userWithoutPassword,\n          token: dummyToken\n        }\n      });\n      return {\n        success: true,\n        message: '회원가입이 완료되었습니다!'\n      };\n\n      // 실제 API 호출 (백엔드 연동 시 사용)\n      // const response = await authAPI.register(userData);\n      // dispatch({\n      //   type: AUTH_ACTIONS.LOGIN_SUCCESS,\n      //   payload: {\n      //     user: response.data.user,\n      //     token: response.data.token\n      //   }\n      // });\n      // return { success: true, message: response.data.message };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || '회원가입 중 오류가 발생했습니다.';\n      dispatch({\n        type: AUTH_ACTIONS.LOGIN_FAIL,\n        payload: errorMessage\n      });\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  };\n\n  // 로그인\n  const login = async loginData => {\n    try {\n      dispatch({\n        type: AUTH_ACTIONS.LOGIN_START\n      });\n\n      // 백엔드가 없으므로 더미 로그인 로직 사용\n\n      // localStorage에서 등록된 사용자들 가져오기\n      const registeredUsers = JSON.parse(localStorage.getItem('registeredUsers') || '[]');\n\n      // 기본 더미 사용자 계정도 포함\n      const allUsers = [{\n        _id: 'user123',\n        name: '김연기',\n        username: 'actor_kim',\n        email: 'test@example.com',\n        password: 'password123',\n        createdAt: '2024-01-01T00:00:00.000Z'\n      }, ...registeredUsers];\n\n      // 이메일과 비밀번호로 사용자 찾기\n      const user = allUsers.find(u => u.email === loginData.email && u.password === loginData.password);\n      if (user) {\n        // 비밀번호 제외하고 사용자 정보 반환\n        const userWithoutPassword = {\n          _id: user._id,\n          name: user.name,\n          username: user.username,\n          email: user.email,\n          createdAt: user.createdAt\n        };\n        const dummyToken = 'dummy-jwt-token-' + Date.now();\n        dispatch({\n          type: AUTH_ACTIONS.LOGIN_SUCCESS,\n          payload: {\n            user: userWithoutPassword,\n            token: dummyToken\n          }\n        });\n        return {\n          success: true,\n          message: '로그인 성공!'\n        };\n      } else {\n        // 잘못된 로그인 정보\n        dispatch({\n          type: AUTH_ACTIONS.LOGIN_FAIL,\n          payload: '이메일 또는 비밀번호가 올바르지 않습니다.'\n        });\n        return {\n          success: false,\n          message: '이메일 또는 비밀번호가 올바르지 않습니다.'\n        };\n      }\n\n      // 실제 API 호출 (백엔드 연동 시 사용)\n      // const response = await authAPI.login(loginData);\n      // dispatch({\n      //   type: AUTH_ACTIONS.LOGIN_SUCCESS,\n      //   payload: {\n      //     user: response.data.user,\n      //     token: response.data.token\n      //   }\n      // });\n      // return { success: true, message: response.data.message };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || '로그인 중 오류가 발생했습니다.';\n      dispatch({\n        type: AUTH_ACTIONS.LOGIN_FAIL,\n        payload: errorMessage\n      });\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  };\n\n  // 로그아웃\n  const logout = async () => {\n    try {\n      await authAPI.logout();\n    } catch (error) {\n      console.error('로그아웃 API 호출 실패:', error);\n    } finally {\n      dispatch({\n        type: AUTH_ACTIONS.LOGOUT\n      });\n    }\n  };\n\n  // 프로필 업데이트\n  const updateProfile = async profileData => {\n    try {\n      const response = await authAPI.updateProfile(profileData);\n      dispatch({\n        type: AUTH_ACTIONS.UPDATE_USER,\n        payload: response.data.user\n      });\n      return {\n        success: true,\n        message: response.data.message\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      const errorMessage = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || '프로필 수정 중 오류가 발생했습니다.';\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  };\n\n  // 비밀번호 변경\n  const changePassword = async passwordData => {\n    try {\n      const response = await authAPI.changePassword(passwordData);\n      return {\n        success: true,\n        message: response.data.message\n      };\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      const errorMessage = ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || '비밀번호 변경 중 오류가 발생했습니다.';\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  };\n\n  // 에러 클리어\n  const clearError = () => {\n    dispatch({\n      type: AUTH_ACTIONS.CLEAR_ERROR\n    });\n  };\n\n  // 대본 좋아요 추가\n  const addLikedScript = useCallback(script => {\n    // 로컬 스토리지에 저장 (추후 API 연동 예정)\n    const currentLiked = JSON.parse(localStorage.getItem('likedScripts') || '[]');\n    const newLiked = [...currentLiked, {\n      ...script,\n      likedAt: new Date().toISOString()\n    }];\n    localStorage.setItem('likedScripts', JSON.stringify(newLiked));\n    dispatch({\n      type: AUTH_ACTIONS.ADD_LIKED_SCRIPT,\n      payload: {\n        ...script,\n        likedAt: new Date().toISOString()\n      }\n    });\n  }, []);\n\n  // 대본 좋아요 제거\n  const removeLikedScript = useCallback(scriptId => {\n    // 로컬 스토리지에서 제거 (추후 API 연동 예정)\n    const currentLiked = JSON.parse(localStorage.getItem('likedScripts') || '[]');\n    const newLiked = currentLiked.filter(script => script._id !== scriptId);\n    localStorage.setItem('likedScripts', JSON.stringify(newLiked));\n    dispatch({\n      type: AUTH_ACTIONS.REMOVE_LIKED_SCRIPT,\n      payload: scriptId\n    });\n  }, []);\n\n  // 좋아요한 대본 목록 로드\n  const loadLikedScripts = useCallback(() => {\n    // 로컬 스토리지에서 로드 (추후 API 연동 예정)\n    const likedScripts = JSON.parse(localStorage.getItem('likedScripts') || '[]');\n    dispatch({\n      type: AUTH_ACTIONS.SET_LIKED_SCRIPTS,\n      payload: likedScripts\n    });\n  }, []);\n\n  // 대본이 좋아요 되었는지 확인\n  const isScriptLiked = useCallback(scriptId => {\n    return state.likedScripts.some(script => script._id === scriptId);\n  }, [state.likedScripts]);\n\n  // 대본 저장 추가\n  const addSavedScript = useCallback(script => {\n    // 로컬 스토리지에 저장 (추후 API 연동 예정)\n    const currentSaved = JSON.parse(localStorage.getItem('savedScripts') || '[]');\n    const newSaved = [...currentSaved, {\n      ...script,\n      savedAt: new Date().toISOString()\n    }];\n    localStorage.setItem('savedScripts', JSON.stringify(newSaved));\n    dispatch({\n      type: AUTH_ACTIONS.ADD_SAVED_SCRIPT,\n      payload: {\n        ...script,\n        savedAt: new Date().toISOString()\n      }\n    });\n  }, []);\n\n  // 대본 저장 제거\n  const removeSavedScript = useCallback(scriptId => {\n    // 로컬 스토리지에서 제거 (추후 API 연동 예정)\n    const currentSaved = JSON.parse(localStorage.getItem('savedScripts') || '[]');\n    const newSaved = currentSaved.filter(script => script._id !== scriptId);\n    localStorage.setItem('savedScripts', JSON.stringify(newSaved));\n    dispatch({\n      type: AUTH_ACTIONS.REMOVE_SAVED_SCRIPT,\n      payload: scriptId\n    });\n  }, []);\n\n  // 저장한 대본 목록 로드\n  const loadSavedScripts = useCallback(() => {\n    // 로컬 스토리지에서 로드 (추후 API 연동 예정)\n    const savedScripts = JSON.parse(localStorage.getItem('savedScripts') || '[]');\n    dispatch({\n      type: AUTH_ACTIONS.SET_SAVED_SCRIPTS,\n      payload: savedScripts\n    });\n  }, []);\n\n  // 대본이 저장되었는지 확인\n  const isScriptSaved = useCallback(scriptId => {\n    return state.savedScripts.some(script => script._id === scriptId);\n  }, [state.savedScripts]);\n  const value = {\n    ...state,\n    register,\n    login,\n    logout,\n    loadUser,\n    updateProfile,\n    changePassword,\n    clearError,\n    addLikedScript,\n    removeLikedScript,\n    loadLikedScripts,\n    isScriptLiked,\n    addSavedScript,\n    removeSavedScript,\n    loadSavedScripts,\n    isScriptSaved\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 508,\n    columnNumber: 5\n  }, this);\n};\n\n// Context 사용을 위한 커스텀 훅\n_s(AuthProvider, \"VNKtOQFzFc8VkUvIG/QvO+g77r8=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useCallback","authAPI","jsxDEV","_jsxDEV","initialState","user","token","isAuthenticated","loading","error","likedScripts","savedScripts","AUTH_ACTIONS","LOGIN_START","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","LOAD_USER","SET_LOADING","CLEAR_ERROR","UPDATE_USER","ADD_LIKED_SCRIPT","REMOVE_LIKED_SCRIPT","SET_LIKED_SCRIPTS","ADD_SAVED_SCRIPT","REMOVE_SAVED_SCRIPT","SET_SAVED_SCRIPTS","authReducer","state","action","type","payload","localStorage","setItem","removeItem","filter","script","_id","AuthContext","AuthProvider","children","_s","dispatch","getItem","loadUser","startsWith","dummyUser","name","username","email","createdAt","console","register","userData","existingUsers","JSON","parse","existingUser","find","success","message","Date","now","password","toISOString","updatedUsers","stringify","dummyToken","userWithoutPassword","_error$response","_error$response$data","errorMessage","response","data","login","loginData","registeredUsers","allUsers","u","_error$response2","_error$response2$data","logout","updateProfile","profileData","_error$response3","_error$response3$data","changePassword","passwordData","_error$response4","_error$response4$data","clearError","addLikedScript","currentLiked","newLiked","likedAt","removeLikedScript","scriptId","loadLikedScripts","isScriptLiked","some","addSavedScript","currentSaved","newSaved","savedAt","removeSavedScript","loadSavedScripts","isScriptSaved","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["D:/carcor/인터넷 쇼핑/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, useCallback } from 'react';\r\nimport { authAPI } from '../services/api';\r\n\r\n// 초기 상태\r\nconst initialState = {\r\n  user: null,\r\n  token: null,\r\n  isAuthenticated: false,\r\n  loading: true,\r\n  error: null,\r\n  likedScripts: [], // 좋아요한 대본 목록\r\n  savedScripts: [] // 저장한 대본 목록\r\n};\r\n\r\n// 액션 타입\r\nconst AUTH_ACTIONS = {\r\n  LOGIN_START: 'LOGIN_START',\r\n  LOGIN_SUCCESS: 'LOGIN_SUCCESS',\r\n  LOGIN_FAIL: 'LOGIN_FAIL',\r\n  LOGOUT: 'LOGOUT',\r\n  LOAD_USER: 'LOAD_USER',\r\n  SET_LOADING: 'SET_LOADING',\r\n  CLEAR_ERROR: 'CLEAR_ERROR',\r\n  UPDATE_USER: 'UPDATE_USER',\r\n  ADD_LIKED_SCRIPT: 'ADD_LIKED_SCRIPT',\r\n  REMOVE_LIKED_SCRIPT: 'REMOVE_LIKED_SCRIPT',\r\n  SET_LIKED_SCRIPTS: 'SET_LIKED_SCRIPTS',\r\n  ADD_SAVED_SCRIPT: 'ADD_SAVED_SCRIPT',\r\n  REMOVE_SAVED_SCRIPT: 'REMOVE_SAVED_SCRIPT',\r\n  SET_SAVED_SCRIPTS: 'SET_SAVED_SCRIPTS'\r\n};\r\n\r\n// 리듀서 함수\r\nconst authReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case AUTH_ACTIONS.SET_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: action.payload\r\n      };\r\n\r\n    case AUTH_ACTIONS.LOGIN_START:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n      };\r\n\r\n    case AUTH_ACTIONS.LOGIN_SUCCESS:\r\n      // 토큰을 localStorage에 저장\r\n      if (action.payload.token) {\r\n        localStorage.setItem('token', action.payload.token);\r\n      }\r\n      return {\r\n        ...state,\r\n        user: action.payload.user,\r\n        token: action.payload.token,\r\n        isAuthenticated: true,\r\n        loading: false,\r\n        error: null\r\n      };\r\n\r\n    case AUTH_ACTIONS.LOGIN_FAIL:\r\n      localStorage.removeItem('token');\r\n      return {\r\n        ...state,\r\n        user: null,\r\n        token: null,\r\n        isAuthenticated: false,\r\n        loading: false,\r\n        error: action.payload\r\n      };\r\n\r\n    case AUTH_ACTIONS.LOGOUT:\r\n      localStorage.removeItem('token');\r\n      return {\r\n        ...state,\r\n        user: null,\r\n        token: null,\r\n        isAuthenticated: false,\r\n        loading: false,\r\n        error: null\r\n      };\r\n\r\n    case AUTH_ACTIONS.LOAD_USER:\r\n      return {\r\n        ...state,\r\n        user: action.payload,\r\n        isAuthenticated: true,\r\n        loading: false\r\n      };\r\n\r\n    case AUTH_ACTIONS.UPDATE_USER:\r\n      return {\r\n        ...state,\r\n        user: action.payload\r\n      };\r\n\r\n    case AUTH_ACTIONS.CLEAR_ERROR:\r\n      return {\r\n        ...state,\r\n        error: null\r\n      };\r\n\r\n    case AUTH_ACTIONS.ADD_LIKED_SCRIPT:\r\n      return {\r\n        ...state,\r\n        likedScripts: [...state.likedScripts, action.payload]\r\n      };\r\n\r\n    case AUTH_ACTIONS.REMOVE_LIKED_SCRIPT:\r\n      return {\r\n        ...state,\r\n        likedScripts: state.likedScripts.filter(script => script._id !== action.payload)\r\n      };\r\n\r\n    case AUTH_ACTIONS.SET_LIKED_SCRIPTS:\r\n      return {\r\n        ...state,\r\n        likedScripts: action.payload\r\n      };\r\n\r\n    case AUTH_ACTIONS.ADD_SAVED_SCRIPT:\r\n      return {\r\n        ...state,\r\n        savedScripts: [...state.savedScripts, action.payload]\r\n      };\r\n\r\n    case AUTH_ACTIONS.REMOVE_SAVED_SCRIPT:\r\n      return {\r\n        ...state,\r\n        savedScripts: state.savedScripts.filter(script => script._id !== action.payload)\r\n      };\r\n\r\n    case AUTH_ACTIONS.SET_SAVED_SCRIPTS:\r\n      return {\r\n        ...state,\r\n        savedScripts: action.payload\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Context 생성\r\nconst AuthContext = createContext();\r\n\r\n// Context Provider 컴포넌트\r\nexport const AuthProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  // 앱 시작 시 토큰 확인 및 사용자 정보 로드\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      loadUser();\r\n    } else {\r\n      dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: false });\r\n    }\r\n  }, []);\r\n\r\n  // 사용자 정보 로드\r\n  const loadUser = async () => {\r\n    try {\r\n      dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: true });\r\n      \r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: false });\r\n        return;\r\n      }\r\n\r\n      // 백엔드가 없으므로 더미 사용자 정보 로드\r\n      if (token.startsWith('dummy-jwt-token')) {\r\n        const dummyUser = {\r\n          _id: 'user123',\r\n          name: '김연기',\r\n          username: 'actor_kim',\r\n          email: 'test@example.com',\r\n          createdAt: '2024-01-01T00:00:00.000Z'\r\n        };\r\n        \r\n        dispatch({\r\n          type: AUTH_ACTIONS.LOAD_USER,\r\n          payload: dummyUser\r\n        });\r\n      } else {\r\n        // 유효하지 않은 토큰\r\n        localStorage.removeItem('token');\r\n        dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: false });\r\n      }\r\n      \r\n      // 실제 API 호출 (백엔드 연동 시 사용)\r\n      // const response = await authAPI.getMe();\r\n      // dispatch({\r\n      //   type: AUTH_ACTIONS.LOAD_USER,\r\n      //   payload: response.data.user\r\n      // });\r\n      \r\n    } catch (error) {\r\n      console.error('사용자 정보 로드 실패:', error);\r\n      localStorage.removeItem('token');\r\n      dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: false });\r\n    }\r\n  };\r\n\r\n  // 회원가입\r\n  const register = async (userData) => {\r\n    try {\r\n      dispatch({ type: AUTH_ACTIONS.LOGIN_START });\r\n      \r\n      // 백엔드가 없으므로 더미 회원가입 로직 사용\r\n      \r\n      // 기존 사용자 목록 가져오기\r\n      const existingUsers = JSON.parse(localStorage.getItem('registeredUsers') || '[]');\r\n      \r\n      // 이메일 중복 체크\r\n      const existingUser = existingUsers.find(user => user.email === userData.email);\r\n      if (existingUser) {\r\n        dispatch({\r\n          type: AUTH_ACTIONS.LOGIN_FAIL,\r\n          payload: '이미 등록된 이메일입니다.'\r\n        });\r\n        return { success: false, message: '이미 등록된 이메일입니다.' };\r\n      }\r\n      \r\n      const dummyUser = {\r\n        _id: 'user_' + Date.now(),\r\n        name: userData.name,\r\n        username: userData.username || userData.name,\r\n        email: userData.email,\r\n        password: userData.password, // 실제 환경에서는 암호화해야 함\r\n        createdAt: new Date().toISOString()\r\n      };\r\n      \r\n      // 새 사용자를 localStorage에 저장\r\n      const updatedUsers = [...existingUsers, dummyUser];\r\n      localStorage.setItem('registeredUsers', JSON.stringify(updatedUsers));\r\n      \r\n      const dummyToken = 'dummy-jwt-token-' + Date.now();\r\n      \r\n      // 비밀번호 제외하고 사용자 정보 반환\r\n      const userWithoutPassword = {\r\n        _id: dummyUser._id,\r\n        name: dummyUser.name,\r\n        username: dummyUser.username,\r\n        email: dummyUser.email,\r\n        createdAt: dummyUser.createdAt\r\n      };\r\n      \r\n      dispatch({\r\n        type: AUTH_ACTIONS.LOGIN_SUCCESS,\r\n        payload: {\r\n          user: userWithoutPassword,\r\n          token: dummyToken\r\n        }\r\n      });\r\n\r\n      return { success: true, message: '회원가입이 완료되었습니다!' };\r\n      \r\n      // 실제 API 호출 (백엔드 연동 시 사용)\r\n      // const response = await authAPI.register(userData);\r\n      // dispatch({\r\n      //   type: AUTH_ACTIONS.LOGIN_SUCCESS,\r\n      //   payload: {\r\n      //     user: response.data.user,\r\n      //     token: response.data.token\r\n      //   }\r\n      // });\r\n      // return { success: true, message: response.data.message };\r\n      \r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || '회원가입 중 오류가 발생했습니다.';\r\n      dispatch({\r\n        type: AUTH_ACTIONS.LOGIN_FAIL,\r\n        payload: errorMessage\r\n      });\r\n      return { success: false, message: errorMessage };\r\n    }\r\n  };\r\n\r\n  // 로그인\r\n  const login = async (loginData) => {\r\n    try {\r\n      dispatch({ type: AUTH_ACTIONS.LOGIN_START });\r\n      \r\n      // 백엔드가 없으므로 더미 로그인 로직 사용\r\n      \r\n      // localStorage에서 등록된 사용자들 가져오기\r\n      const registeredUsers = JSON.parse(localStorage.getItem('registeredUsers') || '[]');\r\n      \r\n      // 기본 더미 사용자 계정도 포함\r\n      const allUsers = [\r\n        {\r\n          _id: 'user123',\r\n          name: '김연기',\r\n          username: 'actor_kim',\r\n          email: 'test@example.com',\r\n          password: 'password123',\r\n          createdAt: '2024-01-01T00:00:00.000Z'\r\n        },\r\n        ...registeredUsers\r\n      ];\r\n      \r\n      // 이메일과 비밀번호로 사용자 찾기\r\n      const user = allUsers.find(u => \r\n        u.email === loginData.email && u.password === loginData.password\r\n      );\r\n      \r\n      if (user) {\r\n        // 비밀번호 제외하고 사용자 정보 반환\r\n        const userWithoutPassword = {\r\n          _id: user._id,\r\n          name: user.name,\r\n          username: user.username,\r\n          email: user.email,\r\n          createdAt: user.createdAt\r\n        };\r\n        \r\n        const dummyToken = 'dummy-jwt-token-' + Date.now();\r\n        \r\n        dispatch({\r\n          type: AUTH_ACTIONS.LOGIN_SUCCESS,\r\n          payload: {\r\n            user: userWithoutPassword,\r\n            token: dummyToken\r\n          }\r\n        });\r\n\r\n        return { success: true, message: '로그인 성공!' };\r\n      } else {\r\n        // 잘못된 로그인 정보\r\n        dispatch({\r\n          type: AUTH_ACTIONS.LOGIN_FAIL,\r\n          payload: '이메일 또는 비밀번호가 올바르지 않습니다.'\r\n        });\r\n        return { success: false, message: '이메일 또는 비밀번호가 올바르지 않습니다.' };\r\n      }\r\n      \r\n      // 실제 API 호출 (백엔드 연동 시 사용)\r\n      // const response = await authAPI.login(loginData);\r\n      // dispatch({\r\n      //   type: AUTH_ACTIONS.LOGIN_SUCCESS,\r\n      //   payload: {\r\n      //     user: response.data.user,\r\n      //     token: response.data.token\r\n      //   }\r\n      // });\r\n      // return { success: true, message: response.data.message };\r\n      \r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || '로그인 중 오류가 발생했습니다.';\r\n      dispatch({\r\n        type: AUTH_ACTIONS.LOGIN_FAIL,\r\n        payload: errorMessage\r\n      });\r\n      return { success: false, message: errorMessage };\r\n    }\r\n  };\r\n\r\n  // 로그아웃\r\n  const logout = async () => {\r\n    try {\r\n      await authAPI.logout();\r\n    } catch (error) {\r\n      console.error('로그아웃 API 호출 실패:', error);\r\n    } finally {\r\n      dispatch({ type: AUTH_ACTIONS.LOGOUT });\r\n    }\r\n  };\r\n\r\n  // 프로필 업데이트\r\n  const updateProfile = async (profileData) => {\r\n    try {\r\n      const response = await authAPI.updateProfile(profileData);\r\n      \r\n      dispatch({\r\n        type: AUTH_ACTIONS.UPDATE_USER,\r\n        payload: response.data.user\r\n      });\r\n\r\n      return { success: true, message: response.data.message };\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || '프로필 수정 중 오류가 발생했습니다.';\r\n      return { success: false, message: errorMessage };\r\n    }\r\n  };\r\n\r\n  // 비밀번호 변경\r\n  const changePassword = async (passwordData) => {\r\n    try {\r\n      const response = await authAPI.changePassword(passwordData);\r\n      return { success: true, message: response.data.message };\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || '비밀번호 변경 중 오류가 발생했습니다.';\r\n      return { success: false, message: errorMessage };\r\n    }\r\n  };\r\n\r\n  // 에러 클리어\r\n  const clearError = () => {\r\n    dispatch({ type: AUTH_ACTIONS.CLEAR_ERROR });\r\n  };\r\n\r\n  // 대본 좋아요 추가\r\n  const addLikedScript = useCallback((script) => {\r\n    // 로컬 스토리지에 저장 (추후 API 연동 예정)\r\n    const currentLiked = JSON.parse(localStorage.getItem('likedScripts') || '[]');\r\n    const newLiked = [...currentLiked, { ...script, likedAt: new Date().toISOString() }];\r\n    localStorage.setItem('likedScripts', JSON.stringify(newLiked));\r\n    \r\n    dispatch({\r\n      type: AUTH_ACTIONS.ADD_LIKED_SCRIPT,\r\n      payload: { ...script, likedAt: new Date().toISOString() }\r\n    });\r\n  }, []);\r\n\r\n  // 대본 좋아요 제거\r\n  const removeLikedScript = useCallback((scriptId) => {\r\n    // 로컬 스토리지에서 제거 (추후 API 연동 예정)\r\n    const currentLiked = JSON.parse(localStorage.getItem('likedScripts') || '[]');\r\n    const newLiked = currentLiked.filter(script => script._id !== scriptId);\r\n    localStorage.setItem('likedScripts', JSON.stringify(newLiked));\r\n    \r\n    dispatch({\r\n      type: AUTH_ACTIONS.REMOVE_LIKED_SCRIPT,\r\n      payload: scriptId\r\n    });\r\n  }, []);\r\n\r\n  // 좋아요한 대본 목록 로드\r\n  const loadLikedScripts = useCallback(() => {\r\n    // 로컬 스토리지에서 로드 (추후 API 연동 예정)\r\n    const likedScripts = JSON.parse(localStorage.getItem('likedScripts') || '[]');\r\n    dispatch({\r\n      type: AUTH_ACTIONS.SET_LIKED_SCRIPTS,\r\n      payload: likedScripts\r\n    });\r\n  }, []);\r\n\r\n  // 대본이 좋아요 되었는지 확인\r\n  const isScriptLiked = useCallback((scriptId) => {\r\n    return state.likedScripts.some(script => script._id === scriptId);\r\n  }, [state.likedScripts]);\r\n\r\n  // 대본 저장 추가\r\n  const addSavedScript = useCallback((script) => {\r\n    // 로컬 스토리지에 저장 (추후 API 연동 예정)\r\n    const currentSaved = JSON.parse(localStorage.getItem('savedScripts') || '[]');\r\n    const newSaved = [...currentSaved, { ...script, savedAt: new Date().toISOString() }];\r\n    localStorage.setItem('savedScripts', JSON.stringify(newSaved));\r\n    \r\n    dispatch({\r\n      type: AUTH_ACTIONS.ADD_SAVED_SCRIPT,\r\n      payload: { ...script, savedAt: new Date().toISOString() }\r\n    });\r\n  }, []);\r\n\r\n  // 대본 저장 제거\r\n  const removeSavedScript = useCallback((scriptId) => {\r\n    // 로컬 스토리지에서 제거 (추후 API 연동 예정)\r\n    const currentSaved = JSON.parse(localStorage.getItem('savedScripts') || '[]');\r\n    const newSaved = currentSaved.filter(script => script._id !== scriptId);\r\n    localStorage.setItem('savedScripts', JSON.stringify(newSaved));\r\n    \r\n    dispatch({\r\n      type: AUTH_ACTIONS.REMOVE_SAVED_SCRIPT,\r\n      payload: scriptId\r\n    });\r\n  }, []);\r\n\r\n  // 저장한 대본 목록 로드\r\n  const loadSavedScripts = useCallback(() => {\r\n    // 로컬 스토리지에서 로드 (추후 API 연동 예정)\r\n    const savedScripts = JSON.parse(localStorage.getItem('savedScripts') || '[]');\r\n    dispatch({\r\n      type: AUTH_ACTIONS.SET_SAVED_SCRIPTS,\r\n      payload: savedScripts\r\n    });\r\n  }, []);\r\n\r\n  // 대본이 저장되었는지 확인\r\n  const isScriptSaved = useCallback((scriptId) => {\r\n    return state.savedScripts.some(script => script._id === scriptId);\r\n  }, [state.savedScripts]);\r\n\r\n  const value = {\r\n    ...state,\r\n    register,\r\n    login,\r\n    logout,\r\n    loadUser,\r\n    updateProfile,\r\n    changePassword,\r\n    clearError,\r\n    addLikedScript,\r\n    removeLikedScript,\r\n    loadLikedScripts,\r\n    isScriptLiked,\r\n    addSavedScript,\r\n    removeSavedScript,\r\n    loadSavedScripts,\r\n    isScriptSaved\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Context 사용을 위한 커스텀 훅\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}