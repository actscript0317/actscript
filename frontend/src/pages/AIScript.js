import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useNavigate, useSearchParams, useLocation } from 'react-router-dom';
import { toast } from 'react-hot-toast';
import {
  Sparkles,
  Users,
  Clock,
  Wand2,
  Copy,
  Save,
  RefreshCw,
  ChevronDown,
  X,
  Film,
  ArrowRight,
  Check,
  Archive,
  RotateCcw,
  AlertCircle,
  Edit3,
  FileText,
  ArrowLeft
} from 'lucide-react';
import api from '../services/api';
import { useAuth } from '../contexts/AuthContext';
import ChildrenThemeSelection from './ai-script/ChildrenThemeSelection';
import AnimalSelection from './ai-script/AnimalSelection';
import ScriptRenderer from '../components/common/ScriptRenderer';
import Dropdown from '../components/common/Dropdown';

const AIScript = () => {
  const { addSavedScript, user } = useAuth();
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const location = useLocation();

  // ÏÇ¨Ïö©Îüâ Í¥ÄÎ¶¨ ÏÉÅÌÉú
  const [usageData, setUsageData] = useState({
    used: 0,
    limit: 10,
    isPremium: true,
    isActive: true,
    canGenerate: true,
    planType: 'test',
    nextResetDate: null,
    daysUntilReset: 0
  });

  // ÌÖúÌîåÎ¶ø ÏÑ†ÌÉù ÏÉÅÌÉú
  const [selectedTemplate, setSelectedTemplate] = useState(null);
  const [currentStep, setCurrentStep] = useState('template'); // 'template' | 'configure' | 'result'

  // Ìèº ÏÉÅÌÉú Í¥ÄÎ¶¨ (GeneralScriptÏóêÏÑú Í∞ÄÏ†∏Ïò¥)
  const [formData, setFormData] = useState({
    template: 'general',
    characterCount: '1',
    genre: '',
    length: '',
    gender: '',
    age: '',
    characters: [],
    characterRelationships: '',
    customPrompt: ''
  });

  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedScript, setGeneratedScript] = useState('');
  const [generatedScriptId, setGeneratedScriptId] = useState(null);
  const [finalPrompt, setFinalPrompt] = useState('');
  const [error, setError] = useState('');
  const [showGenreDropdown, setShowGenreDropdown] = useState(false);

  // Î¶¨ÎùºÏù¥ÌåÖ Í¥ÄÎ†® ÏÉÅÌÉú
  const [selectedText, setSelectedText] = useState('');
  const [selectedTextStart, setSelectedTextStart] = useState(0);
  const [selectedTextEnd, setSelectedTextEnd] = useState(0);
  const [showRewriteModal, setShowRewriteModal] = useState(false);
  const [rewriteIntensity, setRewriteIntensity] = useState('');
  const [isRewriting, setIsRewriting] = useState(false);
  const [rewriteResult, setRewriteResult] = useState(null);

  // Î©îÎ™® Í¥ÄÎ†® ÏÉÅÌÉú
  const [showMemoModal, setShowMemoModal] = useState(false);
  const [scriptMemo, setScriptMemo] = useState('');
  const [isSavingMemo, setIsSavingMemo] = useState(false);

  // ÏÇ¨Ïö©Îüâ Ï†ïÎ≥¥ Î°úÎî© ÏÉÅÌÉú
  const [loadingUsage, setLoadingUsage] = useState(true);

  // Ïª§Ïä§ÌÖÄ ÌîÑÎ°¨ÌîÑÌä∏ ÌÉúÍ∑∏ Í¥ÄÎ†® ÏÉÅÌÉú
  const [showCharacterPanel, setShowCharacterPanel] = useState(false);
  const [textareaRef, setTextareaRef] = useState(null);
  const [cursorPosition, setCursorPosition] = useState(0);

  // ÌÖúÌîåÎ¶ø Îç∞Ïù¥ÌÑ∞
  const templates = [
    {
      value: 'children',
      label: 'Ïñ¥Î¶∞Ïù¥ Ïó∞Í∑π',
      description: '5~12ÏÑ∏ Ïñ¥Î¶∞Ïù¥Î•º ÏúÑÌïú ÍµêÏú°Ï†ÅÏù¥Í≥† Ïû¨ÎØ∏ÏûàÎäî Ïó∞Í∑π',
      icon: 'üßí',
      color: 'from-green-400 to-blue-500',
      path: '/ai-script/children'
    },
    {
      value: 'school',
      label: 'ÌïôÍµê Ïó∞Í∑π',
      description: 'ÌïôÍµê Î∞úÌëúÌöåÎÇò Ï∂ïÏ†úÏóê Ï†ÅÌï©Ìïú Ïó∞Í∑π',
      icon: 'üéí',
      color: 'from-blue-400 to-purple-500',
      path: '/ai-script/school'
    },
    {
      value: 'family',
      label: 'Í∞ÄÏ°± Ïó∞Í∑π',
      description: 'Ïò® Í∞ÄÏ°±Ïù¥ Ìï®Íªò Ï¶êÍ∏∏ Ïàò ÏûàÎäî Ïó∞Í∑π',
      icon: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
      color: 'from-purple-400 to-pink-500',
      path: '/ai-script/family'
    },
    {
      value: 'general',
      label: 'ÏùºÎ∞ò ÎåÄÎ≥∏',
      description: 'ÏûêÏú†Î°úÏö¥ ÏÑ§Ï†ïÏúºÎ°ú Îã§ÏñëÌïú ÏÉÅÌô©Ïùò ÎåÄÎ≥∏',
      icon: 'üé≠',
      color: 'from-pink-400 to-orange-500',
      path: '/ai-script/general'
    }
  ];

  // ÏÇ¨Ïö©Îüâ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
  const fetchUsageInfo = async () => {
    try {
      setLoadingUsage(true);
      const response = await api.get('/admin/usage');
      const { usage } = response.data;

      setUsageData({
        used: usage.currentMonth,
        limit: usage.limit,
        isPremium: true,
        isActive: true,
        canGenerate: usage.canGenerate,
        planType: 'test',
        nextResetDate: usage.nextResetDate,
        daysUntilReset: usage.daysUntilReset
      });
    } catch (error) {
      console.error('ÏÇ¨Ïö©Îüâ Ï†ïÎ≥¥ Î°úÎî© Ïã§Ìå®:', error);
      setUsageData(prev => ({
        ...prev,
        used: user?.usage?.currentMonth || 0,
        limit: user?.usage?.monthly_limit || 10,
        isPremium: true,
        planType: 'test'
      }));
    } finally {
      setLoadingUsage(false);
    }
  };

  // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú ÏÇ¨Ïö©Îüâ Ï†ïÎ≥¥ Î°úÎî©
  useEffect(() => {
    if (user) {
      fetchUsageInfo();
    }
  }, [user]);

  // URL ÌååÎùºÎØ∏ÌÑ∞Ïóê Îî∞Î•∏ ÌÖúÌîåÎ¶ø ÏûêÎèô ÏÑ†ÌÉù
  useEffect(() => {
    const path = location.pathname;
    if (path.includes('/children')) {
      const childrenTemplate = templates.find(t => t.value === 'children');
      setSelectedTemplate(childrenTemplate);
      setFormData(prev => ({ ...prev, template: 'children' }));
      setCurrentStep('configure');
    } else if (path.includes('/school')) {
      const schoolTemplate = templates.find(t => t.value === 'school');
      setSelectedTemplate(schoolTemplate);
      setFormData(prev => ({ ...prev, template: 'school' }));
      setCurrentStep('configure');
    } else if (path.includes('/family')) {
      const familyTemplate = templates.find(t => t.value === 'family');
      setSelectedTemplate(familyTemplate);
      setFormData(prev => ({ ...prev, template: 'family' }));
      setCurrentStep('configure');
    } else if (path.includes('/general')) {
      const generalTemplate = templates.find(t => t.value === 'general');
      setSelectedTemplate(generalTemplate);
      setFormData(prev => ({ ...prev, template: 'general' }));
      setCurrentStep('configure');
    }
  }, [location.pathname]);

  // ÏòµÏÖò Îç∞Ïù¥ÌÑ∞
  const characterOptions = [
    { value: '1', label: '1Ïù∏ ÎèÖÎ∞±', icon: 'üë§', available: true },
    { value: '2', label: '2Ïù∏ ÎåÄÌôî', icon: 'üë•', available: true, premium: false },
    { value: '3', label: '3Ïù∏ ÎåÄÌôî', icon: 'üë•', available: true, premium: false },
    { value: '4', label: '4Ïù∏ ÏïôÏÉÅÎ∏î', icon: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶', available: true, premium: false }
  ];

  const freeGenres = ['Î°úÎß®Ïä§','ÎπÑÍ∑π', 'ÏΩîÎØ∏Îîî', 'ÎìúÎùºÎßà'];
  const premiumGenres = ['Ïä§Î¶¥Îü¨', 'Ïï°ÏÖò', 'Í≥µÌè¨', 'ÌåêÌÉÄÏßÄ', 'SF', 'ÎØ∏Ïä§ÌÑ∞Î¶¨', 'ÏãúÎåÄÍ∑π'];
  const genres = [...freeGenres, ...premiumGenres];

  const lengths = [
    { value: 'short', label: 'ÏßßÍ≤å', time: '1~2Î∂Ñ (ÏïΩ 12~16Ï§Ñ)', icon: '‚ö°', available: true },
    { value: 'medium', label: 'Ï§ëÍ∞Ñ', time: '3~5Î∂Ñ (ÏïΩ 25~35Ï§Ñ)', icon: '‚è±Ô∏è', available: true, premium: false },
    { value: 'long', label: 'Í∏∏Í≤å', time: '5~10Î∂Ñ (ÏïΩ 50~70Ï§Ñ)', icon: 'üìù', available: true, premium: false }
  ];

  const genders = [
    { value: 'male', label: 'ÎÇ®Ïûê', icon: 'üë®' },
    { value: 'female', label: 'Ïó¨Ïûê', icon: 'üë©' },
    { value: 'random', label: 'ÎûúÎç§', icon: 'üé≤' }
  ];

  const ages = [
    { value: 'children', label: 'Ïñ¥Î¶∞Ïù¥ (5~9ÏÑ∏)', description: 'ÏàúÏàòÌïòÍ≥† ÏÉÅÏÉÅÎ†• ÎÑòÏπòÎäî Ïñ¥Î¶∞Ïù¥', icon: 'üßí' },
    { value: 'kids', label: 'Ï¥àÎì±ÌïôÏÉù (10~12ÏÑ∏)', description: 'Ìò∏Í∏∞Ïã¨ ÎßéÍ≥† ÌôúÎ∞úÌïú Ï¥àÎì±ÌïôÏÉù', icon: 'üéí' },
    { value: 'teens', label: '10ÎåÄ', description: 'Ï≤≠ÏÜåÎÖÑÍ∏∞ Í≥†ÎØºÍ≥º ÏÉùÎèôÍ∞ê', icon: 'üéì' },
    { value: '20s', label: '20ÎåÄ', description: 'ÏÇ¨Ìöå Ï¥àÎÖÑÏÉùÏùò Ïó¥Ï†ïÍ≥º Î∞©Ìô©', icon: 'üåü' },
    { value: '30s-40s', label: '30~40ÎåÄ', description: 'ÏÑ±ÏàôÌïú Ïñ¥Î•∏Ïùò ÌòÑÏã§Ï†Å Í≥†ÎØº', icon: 'üíº' },
    { value: '50s', label: '50ÎåÄ', description: 'Ï§ëÎÖÑÏùò ÍπäÏù¥ ÏûàÎäî ÏÑ±Ï∞∞', icon: 'üéØ' },
    { value: '70s+', label: '70ÎåÄ Ïù¥ÏÉÅ', description: 'Ïù∏ÏÉù Í≤ΩÌóòÍ≥º ÏßÄÌòú', icon: 'üéã' },
    { value: 'random', label: 'ÎûúÎç§', description: '10ÎåÄ, 20ÎåÄ, 30ÎåÄ, 40ÎåÄ, 50ÎåÄ, 70+ÎåÄ Ï§ë ÎûúÎç§', icon: 'üé≤' }
  ];

  // TODO(human) - ÌÖúÌîåÎ¶ø ÏÑ†ÌÉù Î°úÏßÅ Íµ¨ÌòÑ
  // ÌòÑÏû¨ AIScriptMain.jsÏùò ÌÖúÌîåÎ¶ø ÏÑ†ÌÉù Í∏∞Îä•Í≥º GeneralScript.jsÏùò ÏÉÅÏÑ∏ ÏÑ§Ï†ï Í∏∞Îä•ÏùÑ ÌÜµÌï©
  // selectedTemplate ÏÉÅÌÉúÎ•º ÌôúÏö©ÌïòÏó¨ Ï°∞Í±¥Î∂Ä Î†åÎçîÎßÅ Íµ¨ÌòÑ

  // ÌÖúÌîåÎ¶ø ÏÑ†ÌÉù Ï≤òÎ¶¨
  const handleTemplateSelect = (templateValue) => {
    const template = templates.find(t => t.value === templateValue);
    setSelectedTemplate(template);
    setFormData(prev => ({ ...prev, template: templateValue }));
    setCurrentStep('configure');
  };

  // Îí§Î°úÍ∞ÄÍ∏∞
  const handleBackToTemplates = () => {
    setSelectedTemplate(null);
    setCurrentStep('template');
    setFormData({
      template: 'general',
      characterCount: '1',
      genre: '',
      length: '',
      gender: '',
      age: '',
      characters: [],
      characterRelationships: '',
      customPrompt: ''
    });
    navigate('/ai-script');
  };

  // ÏûÖÎ†• Î≥ÄÍ≤Ω Ï≤òÎ¶¨
  const handleInputChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));

    if (field === 'characterCount') {
      const count = parseInt(value);
      const characters = [];

      for (let i = 0; i < count; i++) {
        const equalPercentage = Math.floor(100 / count);
        const remainder = 100 - (equalPercentage * count);

        characters.push({
          name: `Ïù∏Î¨º ${i + 1}`,
          gender: '',
          age: '',
          roleType: i === 0 ? 'Ï£ºÏó∞' : 'Ï°∞Ïó∞',
          percentage: i === 0 && remainder > 0 ? equalPercentage + remainder : equalPercentage,
          relationshipWith: i > 0 ? 'Ïù∏Î¨º 1' : '',
          relationshipType: i > 0 ? 'ÏπúÍµ¨' : ''
        });
      }

      setFormData(prev => ({ ...prev, characters }));
    }
  };

  // Ï∫êÎ¶≠ÌÑ∞ Î≥ÄÍ≤Ω Ï≤òÎ¶¨
  const handleCharacterChange = (index, field, value) => {
    setFormData(prev => ({
      ...prev,
      characters: prev.characters.map((char, i) =>
        i === index ? { ...char, [field]: value } : char
      )
    }));
  };

  // ÎåÄÎ≥∏ ÏÉùÏÑ± Ï≤òÎ¶¨
  const handleGenerate = async (e) => {
    e.preventDefault();

    if (!usageData.canGenerate) {
      toast.error('ÏÇ¨Ïö©Îüâ ÌïúÎèÑÎ•º Ï¥àÍ≥ºÌñàÏäµÎãàÎã§.');
      return;
    }

    // Ïª§Ïä§ÌÖÄ ÌîÑÎ°¨ÌîÑÌä∏Í∞Ä ÏûàÏúºÎ©¥ Í∑∏Í≤ÉÏùÑ ÏÇ¨Ïö©, ÏóÜÏúºÎ©¥ Í∏∞Î≥∏ ÏÑ§Ï†ï Í≤ÄÏ¶ù
    if (!formData.customPrompt.trim()) {
      if (!formData.characterCount) {
        toast.error('Îì±Ïû•Ïù∏Î¨º ÏàòÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
        return;
      }

      if (!formData.genre) {
        toast.error('Ïû•Î•¥Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
        return;
      }

      if (!formData.length) {
        toast.error('ÎåÄÎ≥∏ Í∏∏Ïù¥Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
        return;
      }

      if (parseInt(formData.characterCount) > 1) {
        const totalPercentage = formData.characters.reduce((sum, char) => sum + (char.percentage || 0), 0);

        if (totalPercentage !== 100) {
          toast.error('Ïù∏Î¨ºÎì§Ïùò Ï¥ù ÎåÄÏÇ¨ Î∂ÑÎüâÏù¥ 100%Í∞Ä ÎêòÏñ¥Ïïº Ìï©ÎãàÎã§.');
          return;
        }

        const hasEmptyFields = formData.characters.some((char, index) =>
          !char.name.trim() || !char.gender || !char.age || !char.roleType
        );

        if (hasEmptyFields) {
          toast.error('Î™®Îì† Ïù∏Î¨ºÏùò Ï†ïÎ≥¥Î•º ÏôÑÏ†ÑÌûà ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
          return;
        }
      } else {
        if (!formData.gender) {
          toast.error('ÏÑ±Î≥ÑÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
          return;
        }

        if (!formData.age) {
          toast.error('Ïó∞Î†πÎåÄÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
          return;
        }
      }
    }

    setIsGenerating(true);
    setError('');
    setGeneratedScript('');
    setFinalPrompt('');

    try {
      const requestData = { ...formData };

      // ÌÖúÌîåÎ¶øÏóê Îî∞Îùº Îã§Î•∏ ÏóîÎìúÌè¨Ïù∏Ìä∏ Ìò∏Ï∂ú
      let endpoint = '/general-script/generate';
      if (selectedTemplate?.value === 'children') {
        endpoint = '/children-theater/generate';
      }

      const response = await api.post(endpoint, requestData);

      if (response.data.success) {
        setGeneratedScript(response.data.script.content);
        setGeneratedScriptId(response.data.script.id);
        setFinalPrompt(response.data.finalPrompt || '');
        setCurrentStep('result');

        await fetchUsageInfo();

        setTimeout(() => {
          window.scrollTo({ top: 0, behavior: 'smooth' });
        }, 100);

        toast.success('ÎåÄÎ≥∏Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!');
      } else {
        throw new Error(response.data.error || 'ÎåÄÎ≥∏ ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }
    } catch (error) {
      console.error('ÎåÄÎ≥∏ ÏÉùÏÑ± Ïò§Î•ò:', error);
      setError(error.response?.data?.error || error.message || 'ÎåÄÎ≥∏ ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setIsGenerating(false);
    }
  };

  // ÎìúÎ°≠Îã§Ïö¥ Ïª¥Ìè¨ÎÑåÌä∏
  const DropdownComponent = ({ options, value, onChange, placeholder, isOpen, setIsOpen }) => (
    <div className="relative">
      <button
        type="button"
        onClick={() => setIsOpen(!isOpen)}
        className="w-full px-4 py-3 bg-white border border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-colors flex items-center justify-between hover:border-gray-300"
      >
        <span className={value ? 'text-gray-900' : 'text-gray-500'}>
          {value || placeholder}
        </span>
        <ChevronDown className={`w-5 h-5 transition-transform ${isOpen ? 'rotate-180' : ''}`} />
      </button>
      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
            className="absolute top-full left-0 right-0 mt-1 bg-white border border-gray-200 rounded-xl shadow-lg z-10 max-h-60 overflow-y-auto"
          >
            {options.map((option) => (
              <button
                key={option}
                type="button"
                onClick={() => {
                  onChange(option);
                  setIsOpen(false);
                }}
                className="w-full px-4 py-3 text-left transition-colors first:rounded-t-xl last:rounded-b-xl flex items-center justify-between hover:bg-gray-50"
              >
                <span>{option}</span>
              </button>
            ))}
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );

  // Ïñ¥Î¶∞Ïù¥ Ïó∞Í∑π ÌÖúÌîåÎ¶øÏù∏ Í≤ΩÏö∞ ÌäπÎ≥Ñ Ï≤òÎ¶¨
  if (selectedTemplate?.value === 'children') {
    return <AnimalSelection />;
  }

  // Í≤∞Í≥º ÌôîÎ©¥ Î†åÎçîÎßÅ
  if (currentStep === 'result' && generatedScript) {
    return (
      <div className="min-h-screen bg-gray-50 py-8 md:py-12">
        <div className="container mx-auto px-2 sm:px-4">
          <div className="max-w-7xl mx-auto">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              className="bg-white rounded-2xl shadow-md border border-gray-100 p-4 sm:p-6 md:p-8"
            >
              <div className="text-center mb-8">
                <motion.div
                  initial={{ scale: 0 }}
                  animate={{ scale: 1 }}
                  transition={{ delay: 0.2, type: "spring" }}
                  className="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-r from-green-500 to-emerald-500 rounded-2xl mb-4 shadow-lg"
                >
                  <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                  </svg>
                </motion.div>
                <h2 className="text-3xl font-bold text-gray-900 mb-2">AI ÎåÄÎ≥∏ ÏÉùÏÑ± ÏôÑÎ£å!</h2>
                <p className="text-gray-600">ÏÉùÏÑ±Îêú ÎåÄÎ≥∏ÏùÑ ÌôïÏù∏ÌïòÍ≥† Ïó∞ÏäµÏóê ÌôúÏö©Ìï¥Î≥¥ÏÑ∏Ïöî.</p>
              </div>

              <div className="bg-gray-50 rounded-xl p-3 sm:p-4 md:p-6 border border-gray-200 mb-4 sm:mb-6">
                <div className="flex flex-col sm:flex-row sm:items-center justify-between mb-4 space-y-2 sm:space-y-0">
                  <h3 className="text-lg font-semibold text-gray-800">ÏÉùÏÑ±Îêú ÎåÄÎ≥∏</h3>
                  <div className="flex flex-wrap gap-1 sm:gap-2 text-xs sm:text-sm">
                    <span className="px-2 py-1 sm:px-3 bg-purple-100 text-purple-700 rounded-full">
                      {selectedTemplate?.label}
                    </span>
                    {formData.genre && (
                      <span className="px-2 py-1 sm:px-3 bg-blue-100 text-blue-700 rounded-full">
                        {formData.genre}
                      </span>
                    )}
                  </div>
                </div>

                <div className="script-content">
                  <ScriptRenderer script={generatedScript} />
                </div>
              </div>

              <div className="grid grid-cols-1 sm:grid-cols-4 gap-2 sm:gap-4">
                <button
                  onClick={() => {
                    navigator.clipboard.writeText(generatedScript);
                    toast.success('ÎåÄÎ≥∏Ïù¥ ÌÅ¥Î¶ΩÎ≥¥ÎìúÏóê Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§!');
                  }}
                  className="flex items-center justify-center px-3 sm:px-6 py-3 bg-blue-500 hover:bg-blue-600 text-white rounded-xl font-medium transition-colors shadow-md text-sm sm:text-base"
                >
                  <Copy className="w-4 h-4 sm:w-5 sm:h-5 mr-1 sm:mr-2" />
                  Î≥µÏÇ¨
                </button>
                <button
                  onClick={() => navigate('/script-vault')}
                  className="flex items-center justify-center px-3 sm:px-6 py-3 bg-indigo-500 hover:bg-indigo-600 text-white rounded-xl font-medium transition-colors shadow-md text-sm sm:text-base"
                >
                  <Archive className="w-4 h-4 sm:w-5 sm:h-5 mr-1 sm:mr-2" />
                  ÎåÄÎ≥∏Ìï®
                </button>
                <button
                  onClick={handleBackToTemplates}
                  className="flex items-center justify-center px-3 sm:px-6 py-3 bg-gray-500 hover:bg-gray-600 text-white rounded-xl font-medium transition-colors shadow-md text-sm sm:text-base"
                >
                  <ArrowLeft className="w-4 h-4 sm:w-5 sm:h-5 mr-1 sm:mr-2" />
                  ÌÖúÌîåÎ¶ø ÏÑ†ÌÉù
                </button>
                <button
                  onClick={() => {
                    setGeneratedScript('');
                    setFinalPrompt('');
                    setError('');
                    setCurrentStep('configure');
                  }}
                  className="flex items-center justify-center px-3 sm:px-6 py-3 bg-purple-500 hover:bg-purple-600 text-white rounded-xl font-medium transition-colors shadow-md text-sm sm:text-base"
                >
                  <RefreshCw className="w-4 h-4 sm:w-5 sm:h-5 mr-1 sm:mr-2" />
                  Îã§Ïãú ÏÉùÏÑ±
                </button>
              </div>
            </motion.div>
          </div>
        </div>
      </div>
    );
  }

  // ÌÖúÌîåÎ¶ø ÏÑ†ÌÉù ÌôîÎ©¥
  if (currentStep === 'template') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 via-purple-50 to-pink-50 py-4 sm:py-8 md:py-12">
        <div className="container mx-auto px-2 sm:px-4">
          <div className="max-w-4xl mx-auto">

            {/* ÏÇ¨Ïö©Îüâ ÌëúÏãú Î∞î */}
            <div className={`bg-white rounded-lg shadow-sm p-4 mb-6 border-l-4 ${
              usageData.isPremium ? 'border-green-500' : 'border-blue-500'
            }`}>
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <div className="flex items-center space-x-2">
                    <Sparkles className={`w-5 h-5 ${
                      usageData.isPremium ? 'text-green-600' : 'text-blue-600'
                    }`} />
                    <span className="font-medium text-gray-900">
                      {usageData.isPremium ? 'Î¨¥Ï†úÌïú ÌîåÎûú' : 'Î≤†ÌÉÄ ÌÖåÏä§Ìä∏ ÌîåÎûú'}
                    </span>
                  </div>
                  <div className="text-sm text-gray-600">
                    {usageData.limit === null || usageData.limit === 'Î¨¥Ï†úÌïú' ?
                      `${usageData.used}Ìöå ÏÇ¨Ïö© (Î¨¥Ï†úÌïú)` :
                      `${usageData.used}/${usageData.limit}Ìöå ÏÇ¨Ïö©`
                    }
                  </div>
                </div>
              </div>
            </div>

            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="bg-white rounded-2xl shadow-lg p-6 sm:p-8 mb-8"
            >
              <div className="text-center mb-8">
                <motion.div
                  initial={{ scale: 0 }}
                  animate={{ scale: 1 }}
                  transition={{ delay: 0.2, type: "spring" }}
                  className="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-r from-purple-500 to-pink-500 rounded-2xl mb-4 shadow-lg"
                >
                  <Wand2 className="w-8 h-8 text-white" />
                </motion.div>
                <h1 className="text-3xl sm:text-4xl font-bold text-gray-900 mb-2">
                  AI ÎåÄÎ≥∏ ÏÉùÏÑ±Í∏∞
                </h1>
                <p className="text-gray-600 text-lg">
                  ÏÉÅÌô©Ïóê ÎßûÎäî ÌÖúÌîåÎ¶øÏùÑ ÏÑ†ÌÉùÌïòÏó¨ ÎßûÏ∂§Ìòï ÎåÄÎ≥∏ÏùÑ ÏÉùÏÑ±ÌïòÏÑ∏Ïöî
                </p>
              </div>

              <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
                {templates.map((template) => (
                  <motion.div
                    key={template.value}
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    className="relative overflow-hidden"
                  >
                    <button
                      onClick={() => handleTemplateSelect(template.value)}
                      className="w-full p-6 bg-gradient-to-br from-white to-gray-50 border-2 border-gray-200 rounded-2xl hover:border-purple-300 hover:shadow-lg transition-all duration-300 group text-left"
                    >
                      <div className={`inline-flex items-center justify-center w-12 h-12 bg-gradient-to-r ${template.color} rounded-xl mb-4 text-2xl`}>
                        {template.icon}
                      </div>
                      <h3 className="text-xl font-semibold text-gray-900 mb-2 group-hover:text-purple-600 transition-colors">
                        {template.label}
                      </h3>
                      <p className="text-gray-600 mb-4">
                        {template.description}
                      </p>
                      <div className="flex items-center text-purple-600 font-medium">
                        <span>ÏãúÏûëÌïòÍ∏∞</span>
                        <ArrowRight className="w-4 h-4 ml-2 group-hover:translate-x-1 transition-transform" />
                      </div>
                    </button>
                  </motion.div>
                ))}
              </div>
            </motion.div>
          </div>
        </div>
      </div>
    );
  }

  // ÏÑ§Ï†ï ÌôîÎ©¥ (ÏùºÎ∞ò ÎåÄÎ≥∏Ïö©)
  return (
    <div className="min-h-screen bg-gray-50 py-8 md:py-12">
      <div className="container mx-auto px-4 max-w-5xl">

        {/* Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº */}
        <button
          onClick={handleBackToTemplates}
          className="flex items-center text-gray-600 hover:text-gray-900 mb-6 transition-colors"
        >
          <ArrowLeft className="w-5 h-5 mr-2" />
          ÌÖúÌîåÎ¶ø ÏÑ†ÌÉùÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
        </button>

        {/* ÏÑ†ÌÉùÎêú ÌÖúÌîåÎ¶ø ÌëúÏãú */}
        {selectedTemplate && (
          <div className="bg-white border border-gray-200 rounded-2xl p-4 mb-8">
            <div className="flex items-center">
              <div className={`w-12 h-12 bg-gradient-to-r ${selectedTemplate.color} rounded-xl flex items-center justify-center text-2xl mr-4`}>
                {selectedTemplate.icon}
              </div>
              <div>
                <h2 className="text-xl font-semibold text-gray-900">{selectedTemplate.label}</h2>
                <p className="text-gray-600">{selectedTemplate.description}</p>
              </div>
            </div>
          </div>
        )}

        {/* Î©îÏù∏ Ìèº Ïπ¥Îìú */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
          className="bg-white border border-gray-200 rounded-3xl p-8 mb-8"
        >
          <form onSubmit={handleGenerate} className="space-y-8">

            {/* Îì±Ïû•Ïù∏Î¨º Ïàò */}
            <div className="space-y-6">
              <div className="flex items-center space-x-3">
                <Users className="w-5 h-5 text-gray-600" />
                <h3 className="text-lg font-medium text-gray-900">Îì±Ïû•Ïù∏Î¨º Ïàò</h3>
              </div>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                {characterOptions.map((option) => (
                  <label key={option.value} className="relative group">
                    <input
                      type="radio"
                      name="characterCount"
                      value={option.value}
                      checked={formData.characterCount === option.value}
                      onChange={(e) => handleInputChange('characterCount', e.target.value)}
                      className="sr-only peer"
                      disabled={!option.available}
                    />
                    <div className={`p-4 border rounded-2xl transition-all cursor-pointer ${
                      option.available
                        ? 'border-gray-200 hover:border-gray-300 hover:bg-gray-50 peer-checked:border-blue-500 peer-checked:bg-blue-50 peer-checked:ring-2 peer-checked:ring-blue-100'
                        : 'border-gray-100 bg-gray-50 cursor-not-allowed opacity-50'
                    }`}>
                      <div className="text-center space-y-2">
                        <div className={`text-xl ${!option.available ? 'grayscale' : ''}`}>{option.icon}</div>
                        <div className={`text-sm font-medium ${
                          option.available ? 'text-gray-900 group-hover:text-blue-600 peer-checked:text-blue-600' : 'text-gray-500'
                        }`}>
                          {option.label}
                        </div>
                      </div>
                    </div>
                  </label>
                ))}
              </div>
            </div>

            {/* Ïû•Î•¥ ÏÑ†ÌÉù */}
            <div className="space-y-4">
              <label className="flex items-center text-lg font-semibold text-gray-800">
                <Film className="w-6 h-6 mr-3 text-purple-500" />
                Ïû•Î•¥
              </label>
              <DropdownComponent
                options={genres}
                value={formData.genre}
                onChange={(value) => handleInputChange('genre', value)}
                placeholder="Ïû•Î•¥Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî"
                isOpen={showGenreDropdown}
                setIsOpen={setShowGenreDropdown}
              />
            </div>

            {/* ÎåÄÎ≥∏ Í∏∏Ïù¥ */}
            <div className="space-y-4">
              <label className="flex items-center text-lg font-semibold text-gray-800">
                <Clock className="w-6 h-6 mr-3 text-purple-500" />
                ÎåÄÎ≥∏ Í∏∏Ïù¥
              </label>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {lengths.map((length) => (
                  <label key={length.value} className="relative">
                    <input
                      type="radio"
                      name="length"
                      value={length.value}
                      checked={formData.length === length.value}
                      onChange={(e) => handleInputChange('length', e.target.value)}
                      className="sr-only peer"
                    />
                    <div className="p-4 border-2 rounded-xl cursor-pointer transition-all relative bg-gray-50 border-gray-200 hover:bg-gray-100 peer-checked:bg-gradient-to-r peer-checked:from-purple-50 peer-checked:to-pink-50 peer-checked:border-purple-500 peer-checked:shadow-md">
                      <div className="text-center">
                        <div className="text-2xl mb-2">{length.icon}</div>
                        <div className="font-medium text-gray-900">{length.label}</div>
                        <div className="text-sm text-gray-500">{length.time}</div>
                      </div>
                    </div>
                  </label>
                ))}
              </div>
            </div>

            {/* ÏÑ±Î≥Ñ ÏÑ†ÌÉù (1Ïù∏ ÎèÖÎ∞±Ïùº ÎïåÎßå) */}
            {parseInt(formData.characterCount) === 1 && (
              <div className="space-y-4">
                <label className="flex items-center text-lg font-semibold text-gray-800">
                  <Users className="w-6 h-6 mr-3 text-purple-500" />
                  ÏÑ±Î≥Ñ
                </label>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  {genders.map((gender) => (
                    <label key={gender.value} className="relative">
                      <input
                        type="radio"
                        name="gender"
                        value={gender.value}
                        checked={formData.gender === gender.value}
                        onChange={(e) => handleInputChange('gender', e.target.value)}
                        className="sr-only peer"
                      />
                      <div className="p-4 bg-gray-50 border-2 border-gray-200 rounded-xl cursor-pointer transition-all hover:bg-gray-100 peer-checked:bg-gradient-to-r peer-checked:from-blue-50 peer-checked:to-indigo-50 peer-checked:border-blue-500 peer-checked:shadow-md">
                        <div className="text-center">
                          <div className="text-2xl mb-2">{gender.icon}</div>
                          <div className="font-medium text-gray-900">{gender.label}</div>
                        </div>
                      </div>
                    </label>
                  ))}
                </div>
              </div>
            )}

            {/* Ïó∞Î†πÎåÄ ÏÑ†ÌÉù (1Ïù∏ ÎèÖÎ∞±Ïùº ÎïåÎßå) */}
            {parseInt(formData.characterCount) === 1 && (
              <div className="space-y-4">
                <label className="flex items-center text-lg font-semibold text-gray-800">
                  <Clock className="w-6 h-6 mr-3 text-indigo-500" />
                  Ïó∞Î†πÎåÄ
                </label>
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3">
                  {ages.map((age) => (
                    <label key={age.value} className="cursor-pointer">
                      <input
                        type="radio"
                        name="age"
                        value={age.value}
                        checked={formData.age === age.value}
                        onChange={(e) => handleInputChange('age', e.target.value)}
                        className="sr-only peer"
                      />
                      <div className="p-4 bg-gray-50 border-2 border-gray-200 rounded-xl cursor-pointer transition-all hover:bg-gray-100 peer-checked:bg-gradient-to-r peer-checked:from-indigo-50 peer-checked:to-purple-50 peer-checked:border-indigo-500 peer-checked:shadow-md">
                        <div className="text-center">
                          <div className="text-2xl mb-2">{age.icon}</div>
                          <div className="font-medium text-gray-900 mb-1">{age.label}</div>
                          <div className="text-xs text-gray-600">{age.description}</div>
                        </div>
                      </div>
                    </label>
                  ))}
                </div>
              </div>
            )}

            {/* ÏÉùÏÑ± Î≤ÑÌäº */}
            <div className="pt-6">
              <button
                type="submit"
                disabled={isGenerating || !usageData.canGenerate}
                className={`w-full py-4 px-8 text-xl font-semibold rounded-xl transition-all duration-300 ${
                  isGenerating || !usageData.canGenerate
                    ? 'bg-gray-400 cursor-not-allowed'
                    : 'bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 hover:shadow-lg hover:scale-[1.02]'
                } text-white shadow-md`}
              >
                {isGenerating ? (
                  <div className="flex items-center justify-center space-x-3">
                    <motion.div
                      animate={{ rotate: 360 }}
                      transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                      className="w-6 h-6 border-2 border-white border-t-transparent rounded-full"
                    />
                    <span>AIÍ∞Ä ÎåÄÎ≥∏ÏùÑ ÏÉùÏÑ±ÌïòÍ≥† ÏûàÏäµÎãàÎã§...</span>
                  </div>
                ) : !usageData.canGenerate ? (
                  <div className="flex items-center justify-center space-x-3">
                    <AlertCircle className="w-6 h-6" />
                    <span>ÏÇ¨Ïö©Îüâ Ï¥àÍ≥º ({usageData.daysUntilReset}Ïùº ÌõÑ Î¶¨ÏÖã)</span>
                  </div>
                ) : (
                  <div className="flex items-center justify-center space-x-3">
                    <Wand2 className="w-6 h-6" />
                    <span>üé≠ ÎåÄÎ≥∏ ÏÉùÏÑ±ÌïòÍ∏∞</span>
                  </div>
                )}
              </button>
            </div>
          </form>
        </motion.div>

        {/* ÏóêÎü¨ Î©îÏãúÏßÄ */}
        <AnimatePresence>
          {error && (
            <motion.div
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -10 }}
              className="mb-8 bg-red-50 border border-red-200 rounded-xl p-6"
            >
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <X className="h-5 w-5 text-red-400" />
                </div>
                <div className="ml-3">
                  <h3 className="text-sm font-medium text-red-800">Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§</h3>
                  <div className="mt-2 text-sm text-red-700">
                    <p>{error}</p>
                  </div>
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>

      </div>
    </div>
  );
};

export default AIScript;